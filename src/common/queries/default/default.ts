/**
 * Generated by orval v6.8.1 üç∫
 * Do not edit manually.
 * Mantik minimal API
 * The API serves the front end with all necessary information on projects, and users.
 * OpenAPI spec version: 0.1.0
 */
import axios, { AxiosRequestConfig, AxiosResponse, AxiosError } from 'axios'
import {
    useQuery,
    useMutation,
    UseQueryOptions,
    UseMutationOptions,
    QueryFunction,
    MutationFunction,
    UseQueryResult,
    QueryKey,
} from 'react-query'
import type {
    GetUsers200,
    GetUsersParams,
    PutUsers201,
    PutUsersBody,
    User,
    GetUsersUserIdSettings200,
    Settings,
    GetProjects200,
    GetProjectsParams,
    PutProjects201,
    Project,
    GetProjectsUserUserId200,
    GetProjectsUserUserIdParams,
    GetProjectsProjectIdCode200,
    GetProjectsProjectIdCodeParams,
    PutProjectsProjectIdCode201,
    CodeRepository,
    GetProjectsProjectIdData200,
    GetProjectsProjectIdDataParams,
    PutProjectsProjectIdData201,
    DataRepository,
    GetProjectsProjectIdExperiments200,
    GetProjectsProjectIdExperimentsParams,
    PutProjectsProjectIdExperiments201,
    ExperimentRepository,
    GetProjectsProjectIdModels200,
    GetProjectsProjectIdModelsParams,
    PutProjectsProjectIdModels201,
    ModelRepository,
    GetProjectsProjectIdRuns200,
    GetProjectsProjectIdRunsParams,
    GetProjectsUserUserIdSearch200,
    GetProjectsUserUserIdSearchParams,
    GetGroups200,
    GetGroupsParams,
    PutGroups201,
    UserGroup,
    GetOrganizations200,
    GetOrganizationsParams,
    PutOrganizations201,
    Organization,
    GetLabels200,
    GetLabelsParams,
    Label,
    GetLabelsUserIdSearch200,
    GetLabelsUserIdSearchParams,
} from '.././models'

type AwaitedInput<T> = PromiseLike<T> | T

type Awaited<O> = O extends AwaitedInput<infer T> ? T : never

/**
 * List of all users (admin only)
 * @summary List of all users
 */
export const getUsers = (
    params?: GetUsersParams,
    options?: AxiosRequestConfig
): Promise<AxiosResponse<GetUsers200>> => {
    return axios.get(`/users`, {
        params,
        ...options,
    })
}

export const getGetUsersQueryKey = (params?: GetUsersParams) => [
    `/users`,
    ...(params ? [params] : []),
]

export type GetUsersQueryResult = NonNullable<
    Awaited<ReturnType<typeof getUsers>>
>
export type GetUsersQueryError = AxiosError<unknown>

export const useGetUsers = <
    TData = Awaited<ReturnType<typeof getUsers>>,
    TError = AxiosError<unknown>
>(
    params?: GetUsersParams,
    options?: {
        query?: UseQueryOptions<
            Awaited<ReturnType<typeof getUsers>>,
            TError,
            TData
        >
        axios?: AxiosRequestConfig
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions, axios: axiosOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getGetUsersQueryKey(params)

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getUsers>>> = ({
        signal,
    }) => getUsers(params, { signal, ...axiosOptions })

    const query = useQuery<Awaited<ReturnType<typeof getUsers>>, TError, TData>(
        queryKey,
        queryFn,
        queryOptions
    )

    return {
        queryKey,
        ...query,
    }
}

/**
 * @summary Creates a new user
 */
export const putUsers = (
    putUsersBody: PutUsersBody,
    options?: AxiosRequestConfig
): Promise<AxiosResponse<PutUsers201>> => {
    return axios.put(`/users`, putUsersBody, options)
}

export type PutUsersMutationResult = NonNullable<
    Awaited<ReturnType<typeof putUsers>>
>
export type PutUsersMutationBody = PutUsersBody
export type PutUsersMutationError = AxiosError<unknown>

export const usePutUsers = <
    TError = AxiosError<unknown>,
    TContext = unknown
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof putUsers>>,
        TError,
        { data: PutUsersBody },
        TContext
    >
    axios?: AxiosRequestConfig
}) => {
    const { mutation: mutationOptions, axios: axiosOptions } = options ?? {}

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof putUsers>>,
        { data: PutUsersBody }
    > = (props) => {
        const { data } = props ?? {}

        return putUsers(data, axiosOptions)
    }

    return useMutation<
        Awaited<ReturnType<typeof putUsers>>,
        TError,
        { data: PutUsersBody },
        TContext
    >(mutationFn, mutationOptions)
}
/**
 * @summary Returns the information on a specific user
 */
export const getUsersUserId = (
    userId: number,
    options?: AxiosRequestConfig
): Promise<AxiosResponse<User>> => {
    return axios.get(`/users/${userId}`, options)
}

export const getGetUsersUserIdQueryKey = (userId: number) => [
    `/users/${userId}`,
]

export type GetUsersUserIdQueryResult = NonNullable<
    Awaited<ReturnType<typeof getUsersUserId>>
>
export type GetUsersUserIdQueryError = AxiosError<unknown>

export const useGetUsersUserId = <
    TData = Awaited<ReturnType<typeof getUsersUserId>>,
    TError = AxiosError<unknown>
>(
    userId: number,
    options?: {
        query?: UseQueryOptions<
            Awaited<ReturnType<typeof getUsersUserId>>,
            TError,
            TData
        >
        axios?: AxiosRequestConfig
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions, axios: axiosOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getGetUsersUserIdQueryKey(userId)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getUsersUserId>>
    > = ({ signal }) => getUsersUserId(userId, { signal, ...axiosOptions })

    const query = useQuery<
        Awaited<ReturnType<typeof getUsersUserId>>,
        TError,
        TData
    >(queryKey, queryFn, { enabled: !!userId, ...queryOptions })

    return {
        queryKey,
        ...query,
    }
}

/**
 * @summary Update user info
 */
export const postUsersUserId = (
    userId: number,
    user: User,
    options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> => {
    return axios.post(`/users/${userId}`, user, options)
}

export type PostUsersUserIdMutationResult = NonNullable<
    Awaited<ReturnType<typeof postUsersUserId>>
>
export type PostUsersUserIdMutationBody = User
export type PostUsersUserIdMutationError = AxiosError<unknown>

export const usePostUsersUserId = <
    TError = AxiosError<unknown>,
    TContext = unknown
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof postUsersUserId>>,
        TError,
        { userId: number; data: User },
        TContext
    >
    axios?: AxiosRequestConfig
}) => {
    const { mutation: mutationOptions, axios: axiosOptions } = options ?? {}

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof postUsersUserId>>,
        { userId: number; data: User }
    > = (props) => {
        const { userId, data } = props ?? {}

        return postUsersUserId(userId, data, axiosOptions)
    }

    return useMutation<
        Awaited<ReturnType<typeof postUsersUserId>>,
        TError,
        { userId: number; data: User },
        TContext
    >(mutationFn, mutationOptions)
}
/**
 * @summary Returns the settings for a specific user
 */
export const getUsersUserIdSettings = (
    userId: number,
    options?: AxiosRequestConfig
): Promise<AxiosResponse<GetUsersUserIdSettings200>> => {
    return axios.get(`/users/${userId}/settings`, options)
}

export const getGetUsersUserIdSettingsQueryKey = (userId: number) => [
    `/users/${userId}/settings`,
]

export type GetUsersUserIdSettingsQueryResult = NonNullable<
    Awaited<ReturnType<typeof getUsersUserIdSettings>>
>
export type GetUsersUserIdSettingsQueryError = AxiosError<unknown>

export const useGetUsersUserIdSettings = <
    TData = Awaited<ReturnType<typeof getUsersUserIdSettings>>,
    TError = AxiosError<unknown>
>(
    userId: number,
    options?: {
        query?: UseQueryOptions<
            Awaited<ReturnType<typeof getUsersUserIdSettings>>,
            TError,
            TData
        >
        axios?: AxiosRequestConfig
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions, axios: axiosOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ?? getGetUsersUserIdSettingsQueryKey(userId)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getUsersUserIdSettings>>
    > = ({ signal }) =>
        getUsersUserIdSettings(userId, { signal, ...axiosOptions })

    const query = useQuery<
        Awaited<ReturnType<typeof getUsersUserIdSettings>>,
        TError,
        TData
    >(queryKey, queryFn, { enabled: !!userId, ...queryOptions })

    return {
        queryKey,
        ...query,
    }
}

/**
 * @summary Updates user settings
 */
export const postUsersUserIdSettings = (
    userId: number,
    settings: Settings,
    options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> => {
    return axios.post(`/users/${userId}/settings`, settings, options)
}

export type PostUsersUserIdSettingsMutationResult = NonNullable<
    Awaited<ReturnType<typeof postUsersUserIdSettings>>
>
export type PostUsersUserIdSettingsMutationBody = Settings
export type PostUsersUserIdSettingsMutationError = AxiosError<unknown>

export const usePostUsersUserIdSettings = <
    TError = AxiosError<unknown>,
    TContext = unknown
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof postUsersUserIdSettings>>,
        TError,
        { userId: number; data: Settings },
        TContext
    >
    axios?: AxiosRequestConfig
}) => {
    const { mutation: mutationOptions, axios: axiosOptions } = options ?? {}

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof postUsersUserIdSettings>>,
        { userId: number; data: Settings }
    > = (props) => {
        const { userId, data } = props ?? {}

        return postUsersUserIdSettings(userId, data, axiosOptions)
    }

    return useMutation<
        Awaited<ReturnType<typeof postUsersUserIdSettings>>,
        TError,
        { userId: number; data: Settings },
        TContext
    >(mutationFn, mutationOptions)
}
/**
 * @summary Returns all projects (admin only)
 */
export const getProjects = (
    params?: GetProjectsParams,
    options?: AxiosRequestConfig
): Promise<AxiosResponse<GetProjects200>> => {
    return axios.get(`/projects`, {
        params,
        ...options,
    })
}

export const getGetProjectsQueryKey = (params?: GetProjectsParams) => [
    `/projects`,
    ...(params ? [params] : []),
]

export type GetProjectsQueryResult = NonNullable<
    Awaited<ReturnType<typeof getProjects>>
>
export type GetProjectsQueryError = AxiosError<unknown>

export const useGetProjects = <
    TData = Awaited<ReturnType<typeof getProjects>>,
    TError = AxiosError<unknown>
>(
    params?: GetProjectsParams,
    options?: {
        query?: UseQueryOptions<
            Awaited<ReturnType<typeof getProjects>>,
            TError,
            TData
        >
        axios?: AxiosRequestConfig
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions, axios: axiosOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getGetProjectsQueryKey(params)

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getProjects>>> = ({
        signal,
    }) => getProjects(params, { signal, ...axiosOptions })

    const query = useQuery<
        Awaited<ReturnType<typeof getProjects>>,
        TError,
        TData
    >(queryKey, queryFn, queryOptions)

    return {
        queryKey,
        ...query,
    }
}

/**
 * @summary Creates a new project
 */
export const putProjects = (
    project: Project,
    options?: AxiosRequestConfig
): Promise<AxiosResponse<PutProjects201>> => {
    return axios.put(`/projects`, project, options)
}

export type PutProjectsMutationResult = NonNullable<
    Awaited<ReturnType<typeof putProjects>>
>
export type PutProjectsMutationBody = Project
export type PutProjectsMutationError = AxiosError<unknown>

export const usePutProjects = <
    TError = AxiosError<unknown>,
    TContext = unknown
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof putProjects>>,
        TError,
        { data: Project },
        TContext
    >
    axios?: AxiosRequestConfig
}) => {
    const { mutation: mutationOptions, axios: axiosOptions } = options ?? {}

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof putProjects>>,
        { data: Project }
    > = (props) => {
        const { data } = props ?? {}

        return putProjects(data, axiosOptions)
    }

    return useMutation<
        Awaited<ReturnType<typeof putProjects>>,
        TError,
        { data: Project },
        TContext
    >(mutationFn, mutationOptions)
}
/**
 * @summary Returns all projects for user with userId
 */
export const getProjectsUserUserId = (
    userId: number,
    params?: GetProjectsUserUserIdParams,
    options?: AxiosRequestConfig
): Promise<AxiosResponse<GetProjectsUserUserId200>> => {
    return axios.get(`/projects/user/${userId}`, {
        params,
        ...options,
    })
}

export const getGetProjectsUserUserIdQueryKey = (
    userId: number,
    params?: GetProjectsUserUserIdParams
) => [`/projects/user/${userId}`, ...(params ? [params] : [])]

export type GetProjectsUserUserIdQueryResult = NonNullable<
    Awaited<ReturnType<typeof getProjectsUserUserId>>
>
export type GetProjectsUserUserIdQueryError = AxiosError<unknown>

export const useGetProjectsUserUserId = <
    TData = Awaited<ReturnType<typeof getProjectsUserUserId>>,
    TError = AxiosError<unknown>
>(
    userId: number,
    params?: GetProjectsUserUserIdParams,
    options?: {
        query?: UseQueryOptions<
            Awaited<ReturnType<typeof getProjectsUserUserId>>,
            TError,
            TData
        >
        axios?: AxiosRequestConfig
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions, axios: axiosOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getGetProjectsUserUserIdQueryKey(userId, params)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getProjectsUserUserId>>
    > = ({ signal }) =>
        getProjectsUserUserId(userId, params, { signal, ...axiosOptions })

    const query = useQuery<
        Awaited<ReturnType<typeof getProjectsUserUserId>>,
        TError,
        TData
    >(queryKey, queryFn, { enabled: !!userId, ...queryOptions })

    return {
        queryKey,
        ...query,
    }
}

/**
 * @summary Returns the information on a specific project
 */
export const getProjectsProjectId = (
    projectId: number,
    options?: AxiosRequestConfig
): Promise<AxiosResponse<Project>> => {
    return axios.get(`/projects/${projectId}`, options)
}

export const getGetProjectsProjectIdQueryKey = (projectId: number) => [
    `/projects/${projectId}`,
]

export type GetProjectsProjectIdQueryResult = NonNullable<
    Awaited<ReturnType<typeof getProjectsProjectId>>
>
export type GetProjectsProjectIdQueryError = AxiosError<unknown>

export const useGetProjectsProjectId = <
    TData = Awaited<ReturnType<typeof getProjectsProjectId>>,
    TError = AxiosError<unknown>
>(
    projectId: number,
    options?: {
        query?: UseQueryOptions<
            Awaited<ReturnType<typeof getProjectsProjectId>>,
            TError,
            TData
        >
        axios?: AxiosRequestConfig
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions, axios: axiosOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ?? getGetProjectsProjectIdQueryKey(projectId)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getProjectsProjectId>>
    > = ({ signal }) =>
        getProjectsProjectId(projectId, { signal, ...axiosOptions })

    const query = useQuery<
        Awaited<ReturnType<typeof getProjectsProjectId>>,
        TError,
        TData
    >(queryKey, queryFn, { enabled: !!projectId, ...queryOptions })

    return {
        queryKey,
        ...query,
    }
}

/**
 * @summary Update project
 */
export const postProjectsProjectId = (
    projectId: number,
    project: Project,
    options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> => {
    return axios.post(`/projects/${projectId}`, project, options)
}

export type PostProjectsProjectIdMutationResult = NonNullable<
    Awaited<ReturnType<typeof postProjectsProjectId>>
>
export type PostProjectsProjectIdMutationBody = Project
export type PostProjectsProjectIdMutationError = AxiosError<unknown>

export const usePostProjectsProjectId = <
    TError = AxiosError<unknown>,
    TContext = unknown
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof postProjectsProjectId>>,
        TError,
        { projectId: number; data: Project },
        TContext
    >
    axios?: AxiosRequestConfig
}) => {
    const { mutation: mutationOptions, axios: axiosOptions } = options ?? {}

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof postProjectsProjectId>>,
        { projectId: number; data: Project }
    > = (props) => {
        const { projectId, data } = props ?? {}

        return postProjectsProjectId(projectId, data, axiosOptions)
    }

    return useMutation<
        Awaited<ReturnType<typeof postProjectsProjectId>>,
        TError,
        { projectId: number; data: Project },
        TContext
    >(mutationFn, mutationOptions)
}
/**
 * @summary Returns code entries for given project
 */
export const getProjectsProjectIdCode = (
    projectId: number,
    params?: GetProjectsProjectIdCodeParams,
    options?: AxiosRequestConfig
): Promise<AxiosResponse<GetProjectsProjectIdCode200>> => {
    return axios.get(`/projects/${projectId}/code`, {
        params,
        ...options,
    })
}

export const getGetProjectsProjectIdCodeQueryKey = (
    projectId: number,
    params?: GetProjectsProjectIdCodeParams
) => [`/projects/${projectId}/code`, ...(params ? [params] : [])]

export type GetProjectsProjectIdCodeQueryResult = NonNullable<
    Awaited<ReturnType<typeof getProjectsProjectIdCode>>
>
export type GetProjectsProjectIdCodeQueryError = AxiosError<unknown>

export const useGetProjectsProjectIdCode = <
    TData = Awaited<ReturnType<typeof getProjectsProjectIdCode>>,
    TError = AxiosError<unknown>
>(
    projectId: number,
    params?: GetProjectsProjectIdCodeParams,
    options?: {
        query?: UseQueryOptions<
            Awaited<ReturnType<typeof getProjectsProjectIdCode>>,
            TError,
            TData
        >
        axios?: AxiosRequestConfig
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions, axios: axiosOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getGetProjectsProjectIdCodeQueryKey(projectId, params)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getProjectsProjectIdCode>>
    > = ({ signal }) =>
        getProjectsProjectIdCode(projectId, params, { signal, ...axiosOptions })

    const query = useQuery<
        Awaited<ReturnType<typeof getProjectsProjectIdCode>>,
        TError,
        TData
    >(queryKey, queryFn, { enabled: !!projectId, ...queryOptions })

    return {
        queryKey,
        ...query,
    }
}

/**
 * @summary Add code repository
 */
export const putProjectsProjectIdCode = (
    projectId: number,
    codeRepository: CodeRepository,
    options?: AxiosRequestConfig
): Promise<AxiosResponse<PutProjectsProjectIdCode201>> => {
    return axios.put(`/projects/${projectId}/code`, codeRepository, options)
}

export type PutProjectsProjectIdCodeMutationResult = NonNullable<
    Awaited<ReturnType<typeof putProjectsProjectIdCode>>
>
export type PutProjectsProjectIdCodeMutationBody = CodeRepository
export type PutProjectsProjectIdCodeMutationError = AxiosError<unknown>

export const usePutProjectsProjectIdCode = <
    TError = AxiosError<unknown>,
    TContext = unknown
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof putProjectsProjectIdCode>>,
        TError,
        { projectId: number; data: CodeRepository },
        TContext
    >
    axios?: AxiosRequestConfig
}) => {
    const { mutation: mutationOptions, axios: axiosOptions } = options ?? {}

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof putProjectsProjectIdCode>>,
        { projectId: number; data: CodeRepository }
    > = (props) => {
        const { projectId, data } = props ?? {}

        return putProjectsProjectIdCode(projectId, data, axiosOptions)
    }

    return useMutation<
        Awaited<ReturnType<typeof putProjectsProjectIdCode>>,
        TError,
        { projectId: number; data: CodeRepository },
        TContext
    >(mutationFn, mutationOptions)
}
/**
 * @summary Returns code entry for given project
 */
export const getProjectsProjectIdCodeCodeRepositoryId = (
    projectId: number,
    codeRepositoryId: number,
    options?: AxiosRequestConfig
): Promise<AxiosResponse<CodeRepository>> => {
    return axios.get(`/projects/${projectId}/code/${codeRepositoryId}`, options)
}

export const getGetProjectsProjectIdCodeCodeRepositoryIdQueryKey = (
    projectId: number,
    codeRepositoryId: number
) => [`/projects/${projectId}/code/${codeRepositoryId}`]

export type GetProjectsProjectIdCodeCodeRepositoryIdQueryResult = NonNullable<
    Awaited<ReturnType<typeof getProjectsProjectIdCodeCodeRepositoryId>>
>
export type GetProjectsProjectIdCodeCodeRepositoryIdQueryError =
    AxiosError<unknown>

export const useGetProjectsProjectIdCodeCodeRepositoryId = <
    TData = Awaited<
        ReturnType<typeof getProjectsProjectIdCodeCodeRepositoryId>
    >,
    TError = AxiosError<unknown>
>(
    projectId: number,
    codeRepositoryId: number,
    options?: {
        query?: UseQueryOptions<
            Awaited<
                ReturnType<typeof getProjectsProjectIdCodeCodeRepositoryId>
            >,
            TError,
            TData
        >
        axios?: AxiosRequestConfig
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions, axios: axiosOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getGetProjectsProjectIdCodeCodeRepositoryIdQueryKey(
            projectId,
            codeRepositoryId
        )

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getProjectsProjectIdCodeCodeRepositoryId>>
    > = ({ signal }) =>
        getProjectsProjectIdCodeCodeRepositoryId(projectId, codeRepositoryId, {
            signal,
            ...axiosOptions,
        })

    const query = useQuery<
        Awaited<ReturnType<typeof getProjectsProjectIdCodeCodeRepositoryId>>,
        TError,
        TData
    >(queryKey, queryFn, {
        enabled: !!(projectId && codeRepositoryId),
        ...queryOptions,
    })

    return {
        queryKey,
        ...query,
    }
}

/**
 * @summary Updates code repository
 */
export const postProjectsProjectIdCodeCodeRepositoryId = (
    projectId: number,
    codeRepositoryId: number,
    codeRepository: CodeRepository,
    options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> => {
    return axios.post(
        `/projects/${projectId}/code/${codeRepositoryId}`,
        codeRepository,
        options
    )
}

export type PostProjectsProjectIdCodeCodeRepositoryIdMutationResult =
    NonNullable<
        Awaited<ReturnType<typeof postProjectsProjectIdCodeCodeRepositoryId>>
    >
export type PostProjectsProjectIdCodeCodeRepositoryIdMutationBody =
    CodeRepository
export type PostProjectsProjectIdCodeCodeRepositoryIdMutationError =
    AxiosError<unknown>

export const usePostProjectsProjectIdCodeCodeRepositoryId = <
    TError = AxiosError<unknown>,
    TContext = unknown
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof postProjectsProjectIdCodeCodeRepositoryId>>,
        TError,
        { projectId: number; codeRepositoryId: number; data: CodeRepository },
        TContext
    >
    axios?: AxiosRequestConfig
}) => {
    const { mutation: mutationOptions, axios: axiosOptions } = options ?? {}

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof postProjectsProjectIdCodeCodeRepositoryId>>,
        { projectId: number; codeRepositoryId: number; data: CodeRepository }
    > = (props) => {
        const { projectId, codeRepositoryId, data } = props ?? {}

        return postProjectsProjectIdCodeCodeRepositoryId(
            projectId,
            codeRepositoryId,
            data,
            axiosOptions
        )
    }

    return useMutation<
        Awaited<ReturnType<typeof postProjectsProjectIdCodeCodeRepositoryId>>,
        TError,
        { projectId: number; codeRepositoryId: number; data: CodeRepository },
        TContext
    >(mutationFn, mutationOptions)
}
/**
 * @summary Returns data entries for given project
 */
export const getProjectsProjectIdData = (
    projectId: number,
    params?: GetProjectsProjectIdDataParams,
    options?: AxiosRequestConfig
): Promise<AxiosResponse<GetProjectsProjectIdData200>> => {
    return axios.get(`/projects/${projectId}/data`, {
        params,
        ...options,
    })
}

export const getGetProjectsProjectIdDataQueryKey = (
    projectId: number,
    params?: GetProjectsProjectIdDataParams
) => [`/projects/${projectId}/data`, ...(params ? [params] : [])]

export type GetProjectsProjectIdDataQueryResult = NonNullable<
    Awaited<ReturnType<typeof getProjectsProjectIdData>>
>
export type GetProjectsProjectIdDataQueryError = AxiosError<unknown>

export const useGetProjectsProjectIdData = <
    TData = Awaited<ReturnType<typeof getProjectsProjectIdData>>,
    TError = AxiosError<unknown>
>(
    projectId: number,
    params?: GetProjectsProjectIdDataParams,
    options?: {
        query?: UseQueryOptions<
            Awaited<ReturnType<typeof getProjectsProjectIdData>>,
            TError,
            TData
        >
        axios?: AxiosRequestConfig
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions, axios: axiosOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getGetProjectsProjectIdDataQueryKey(projectId, params)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getProjectsProjectIdData>>
    > = ({ signal }) =>
        getProjectsProjectIdData(projectId, params, { signal, ...axiosOptions })

    const query = useQuery<
        Awaited<ReturnType<typeof getProjectsProjectIdData>>,
        TError,
        TData
    >(queryKey, queryFn, { enabled: !!projectId, ...queryOptions })

    return {
        queryKey,
        ...query,
    }
}

/**
 * @summary Add data repository
 */
export const putProjectsProjectIdData = (
    projectId: number,
    dataRepository: DataRepository,
    options?: AxiosRequestConfig
): Promise<AxiosResponse<PutProjectsProjectIdData201>> => {
    return axios.put(`/projects/${projectId}/data`, dataRepository, options)
}

export type PutProjectsProjectIdDataMutationResult = NonNullable<
    Awaited<ReturnType<typeof putProjectsProjectIdData>>
>
export type PutProjectsProjectIdDataMutationBody = DataRepository
export type PutProjectsProjectIdDataMutationError = AxiosError<unknown>

export const usePutProjectsProjectIdData = <
    TError = AxiosError<unknown>,
    TContext = unknown
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof putProjectsProjectIdData>>,
        TError,
        { projectId: number; data: DataRepository },
        TContext
    >
    axios?: AxiosRequestConfig
}) => {
    const { mutation: mutationOptions, axios: axiosOptions } = options ?? {}

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof putProjectsProjectIdData>>,
        { projectId: number; data: DataRepository }
    > = (props) => {
        const { projectId, data } = props ?? {}

        return putProjectsProjectIdData(projectId, data, axiosOptions)
    }

    return useMutation<
        Awaited<ReturnType<typeof putProjectsProjectIdData>>,
        TError,
        { projectId: number; data: DataRepository },
        TContext
    >(mutationFn, mutationOptions)
}
/**
 * @summary Returns data entry for given project
 */
export const getProjectsProjectIdDataDataRepositoryId = (
    projectId: number,
    dataRepositoryId: number,
    options?: AxiosRequestConfig
): Promise<AxiosResponse<DataRepository>> => {
    return axios.get(`/projects/${projectId}/data/${dataRepositoryId}`, options)
}

export const getGetProjectsProjectIdDataDataRepositoryIdQueryKey = (
    projectId: number,
    dataRepositoryId: number
) => [`/projects/${projectId}/data/${dataRepositoryId}`]

export type GetProjectsProjectIdDataDataRepositoryIdQueryResult = NonNullable<
    Awaited<ReturnType<typeof getProjectsProjectIdDataDataRepositoryId>>
>
export type GetProjectsProjectIdDataDataRepositoryIdQueryError =
    AxiosError<unknown>

export const useGetProjectsProjectIdDataDataRepositoryId = <
    TData = Awaited<
        ReturnType<typeof getProjectsProjectIdDataDataRepositoryId>
    >,
    TError = AxiosError<unknown>
>(
    projectId: number,
    dataRepositoryId: number,
    options?: {
        query?: UseQueryOptions<
            Awaited<
                ReturnType<typeof getProjectsProjectIdDataDataRepositoryId>
            >,
            TError,
            TData
        >
        axios?: AxiosRequestConfig
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions, axios: axiosOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getGetProjectsProjectIdDataDataRepositoryIdQueryKey(
            projectId,
            dataRepositoryId
        )

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getProjectsProjectIdDataDataRepositoryId>>
    > = ({ signal }) =>
        getProjectsProjectIdDataDataRepositoryId(projectId, dataRepositoryId, {
            signal,
            ...axiosOptions,
        })

    const query = useQuery<
        Awaited<ReturnType<typeof getProjectsProjectIdDataDataRepositoryId>>,
        TError,
        TData
    >(queryKey, queryFn, {
        enabled: !!(projectId && dataRepositoryId),
        ...queryOptions,
    })

    return {
        queryKey,
        ...query,
    }
}

/**
 * @summary Update data repository
 */
export const postProjectsProjectIdDataDataRepositoryId = (
    projectId: number,
    dataRepositoryId: number,
    dataRepository: DataRepository,
    options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> => {
    return axios.post(
        `/projects/${projectId}/data/${dataRepositoryId}`,
        dataRepository,
        options
    )
}

export type PostProjectsProjectIdDataDataRepositoryIdMutationResult =
    NonNullable<
        Awaited<ReturnType<typeof postProjectsProjectIdDataDataRepositoryId>>
    >
export type PostProjectsProjectIdDataDataRepositoryIdMutationBody =
    DataRepository
export type PostProjectsProjectIdDataDataRepositoryIdMutationError =
    AxiosError<unknown>

export const usePostProjectsProjectIdDataDataRepositoryId = <
    TError = AxiosError<unknown>,
    TContext = unknown
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof postProjectsProjectIdDataDataRepositoryId>>,
        TError,
        { projectId: number; dataRepositoryId: number; data: DataRepository },
        TContext
    >
    axios?: AxiosRequestConfig
}) => {
    const { mutation: mutationOptions, axios: axiosOptions } = options ?? {}

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof postProjectsProjectIdDataDataRepositoryId>>,
        { projectId: number; dataRepositoryId: number; data: DataRepository }
    > = (props) => {
        const { projectId, dataRepositoryId, data } = props ?? {}

        return postProjectsProjectIdDataDataRepositoryId(
            projectId,
            dataRepositoryId,
            data,
            axiosOptions
        )
    }

    return useMutation<
        Awaited<ReturnType<typeof postProjectsProjectIdDataDataRepositoryId>>,
        TError,
        { projectId: number; dataRepositoryId: number; data: DataRepository },
        TContext
    >(mutationFn, mutationOptions)
}
/**
 * @summary Returns experiment entries for given project
 */
export const getProjectsProjectIdExperiments = (
    projectId: number,
    params?: GetProjectsProjectIdExperimentsParams,
    options?: AxiosRequestConfig
): Promise<AxiosResponse<GetProjectsProjectIdExperiments200>> => {
    return axios.get(`/projects/${projectId}/experiments`, {
        params,
        ...options,
    })
}

export const getGetProjectsProjectIdExperimentsQueryKey = (
    projectId: number,
    params?: GetProjectsProjectIdExperimentsParams
) => [`/projects/${projectId}/experiments`, ...(params ? [params] : [])]

export type GetProjectsProjectIdExperimentsQueryResult = NonNullable<
    Awaited<ReturnType<typeof getProjectsProjectIdExperiments>>
>
export type GetProjectsProjectIdExperimentsQueryError = AxiosError<unknown>

export const useGetProjectsProjectIdExperiments = <
    TData = Awaited<ReturnType<typeof getProjectsProjectIdExperiments>>,
    TError = AxiosError<unknown>
>(
    projectId: number,
    params?: GetProjectsProjectIdExperimentsParams,
    options?: {
        query?: UseQueryOptions<
            Awaited<ReturnType<typeof getProjectsProjectIdExperiments>>,
            TError,
            TData
        >
        axios?: AxiosRequestConfig
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions, axios: axiosOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getGetProjectsProjectIdExperimentsQueryKey(projectId, params)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getProjectsProjectIdExperiments>>
    > = ({ signal }) =>
        getProjectsProjectIdExperiments(projectId, params, {
            signal,
            ...axiosOptions,
        })

    const query = useQuery<
        Awaited<ReturnType<typeof getProjectsProjectIdExperiments>>,
        TError,
        TData
    >(queryKey, queryFn, { enabled: !!projectId, ...queryOptions })

    return {
        queryKey,
        ...query,
    }
}

/**
 * @summary Add experiment repository
 */
export const putProjectsProjectIdExperiments = (
    projectId: number,
    experimentRepository: ExperimentRepository,
    options?: AxiosRequestConfig
): Promise<AxiosResponse<PutProjectsProjectIdExperiments201>> => {
    return axios.put(
        `/projects/${projectId}/experiments`,
        experimentRepository,
        options
    )
}

export type PutProjectsProjectIdExperimentsMutationResult = NonNullable<
    Awaited<ReturnType<typeof putProjectsProjectIdExperiments>>
>
export type PutProjectsProjectIdExperimentsMutationBody = ExperimentRepository
export type PutProjectsProjectIdExperimentsMutationError = AxiosError<unknown>

export const usePutProjectsProjectIdExperiments = <
    TError = AxiosError<unknown>,
    TContext = unknown
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof putProjectsProjectIdExperiments>>,
        TError,
        { projectId: number; data: ExperimentRepository },
        TContext
    >
    axios?: AxiosRequestConfig
}) => {
    const { mutation: mutationOptions, axios: axiosOptions } = options ?? {}

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof putProjectsProjectIdExperiments>>,
        { projectId: number; data: ExperimentRepository }
    > = (props) => {
        const { projectId, data } = props ?? {}

        return putProjectsProjectIdExperiments(projectId, data, axiosOptions)
    }

    return useMutation<
        Awaited<ReturnType<typeof putProjectsProjectIdExperiments>>,
        TError,
        { projectId: number; data: ExperimentRepository },
        TContext
    >(mutationFn, mutationOptions)
}
/**
 * @summary Returns experiment entry for given project
 */
export const getProjectsProjectIdExperimentsExperimentRepositoryId = (
    projectId: number,
    experimentRepositoryId: number,
    options?: AxiosRequestConfig
): Promise<AxiosResponse<ExperimentRepository>> => {
    return axios.get(
        `/projects/${projectId}/experiments/${experimentRepositoryId}`,
        options
    )
}

export const getGetProjectsProjectIdExperimentsExperimentRepositoryIdQueryKey =
    (projectId: number, experimentRepositoryId: number) => [
        `/projects/${projectId}/experiments/${experimentRepositoryId}`,
    ]

export type GetProjectsProjectIdExperimentsExperimentRepositoryIdQueryResult =
    NonNullable<
        Awaited<
            ReturnType<
                typeof getProjectsProjectIdExperimentsExperimentRepositoryId
            >
        >
    >
export type GetProjectsProjectIdExperimentsExperimentRepositoryIdQueryError =
    AxiosError<unknown>

export const useGetProjectsProjectIdExperimentsExperimentRepositoryId = <
    TData = Awaited<
        ReturnType<typeof getProjectsProjectIdExperimentsExperimentRepositoryId>
    >,
    TError = AxiosError<unknown>
>(
    projectId: number,
    experimentRepositoryId: number,
    options?: {
        query?: UseQueryOptions<
            Awaited<
                ReturnType<
                    typeof getProjectsProjectIdExperimentsExperimentRepositoryId
                >
            >,
            TError,
            TData
        >
        axios?: AxiosRequestConfig
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions, axios: axiosOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getGetProjectsProjectIdExperimentsExperimentRepositoryIdQueryKey(
            projectId,
            experimentRepositoryId
        )

    const queryFn: QueryFunction<
        Awaited<
            ReturnType<
                typeof getProjectsProjectIdExperimentsExperimentRepositoryId
            >
        >
    > = ({ signal }) =>
        getProjectsProjectIdExperimentsExperimentRepositoryId(
            projectId,
            experimentRepositoryId,
            { signal, ...axiosOptions }
        )

    const query = useQuery<
        Awaited<
            ReturnType<
                typeof getProjectsProjectIdExperimentsExperimentRepositoryId
            >
        >,
        TError,
        TData
    >(queryKey, queryFn, {
        enabled: !!(projectId && experimentRepositoryId),
        ...queryOptions,
    })

    return {
        queryKey,
        ...query,
    }
}

/**
 * @summary Update experiment repository
 */
export const postProjectsProjectIdExperimentsExperimentRepositoryId = (
    projectId: number,
    experimentRepositoryId: number,
    experimentRepository: ExperimentRepository,
    options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> => {
    return axios.post(
        `/projects/${projectId}/experiments/${experimentRepositoryId}`,
        experimentRepository,
        options
    )
}

export type PostProjectsProjectIdExperimentsExperimentRepositoryIdMutationResult =
    NonNullable<
        Awaited<
            ReturnType<
                typeof postProjectsProjectIdExperimentsExperimentRepositoryId
            >
        >
    >
export type PostProjectsProjectIdExperimentsExperimentRepositoryIdMutationBody =
    ExperimentRepository
export type PostProjectsProjectIdExperimentsExperimentRepositoryIdMutationError =
    AxiosError<unknown>

export const usePostProjectsProjectIdExperimentsExperimentRepositoryId = <
    TError = AxiosError<unknown>,
    TContext = unknown
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<
            ReturnType<
                typeof postProjectsProjectIdExperimentsExperimentRepositoryId
            >
        >,
        TError,
        {
            projectId: number
            experimentRepositoryId: number
            data: ExperimentRepository
        },
        TContext
    >
    axios?: AxiosRequestConfig
}) => {
    const { mutation: mutationOptions, axios: axiosOptions } = options ?? {}

    const mutationFn: MutationFunction<
        Awaited<
            ReturnType<
                typeof postProjectsProjectIdExperimentsExperimentRepositoryId
            >
        >,
        {
            projectId: number
            experimentRepositoryId: number
            data: ExperimentRepository
        }
    > = (props) => {
        const { projectId, experimentRepositoryId, data } = props ?? {}

        return postProjectsProjectIdExperimentsExperimentRepositoryId(
            projectId,
            experimentRepositoryId,
            data,
            axiosOptions
        )
    }

    return useMutation<
        Awaited<
            ReturnType<
                typeof postProjectsProjectIdExperimentsExperimentRepositoryId
            >
        >,
        TError,
        {
            projectId: number
            experimentRepositoryId: number
            data: ExperimentRepository
        },
        TContext
    >(mutationFn, mutationOptions)
}
/**
 * @summary Returns model entries for given project
 */
export const getProjectsProjectIdModels = (
    projectId: number,
    params?: GetProjectsProjectIdModelsParams,
    options?: AxiosRequestConfig
): Promise<AxiosResponse<GetProjectsProjectIdModels200>> => {
    return axios.get(`/projects/${projectId}/models`, {
        params,
        ...options,
    })
}

export const getGetProjectsProjectIdModelsQueryKey = (
    projectId: number,
    params?: GetProjectsProjectIdModelsParams
) => [`/projects/${projectId}/models`, ...(params ? [params] : [])]

export type GetProjectsProjectIdModelsQueryResult = NonNullable<
    Awaited<ReturnType<typeof getProjectsProjectIdModels>>
>
export type GetProjectsProjectIdModelsQueryError = AxiosError<unknown>

export const useGetProjectsProjectIdModels = <
    TData = Awaited<ReturnType<typeof getProjectsProjectIdModels>>,
    TError = AxiosError<unknown>
>(
    projectId: number,
    params?: GetProjectsProjectIdModelsParams,
    options?: {
        query?: UseQueryOptions<
            Awaited<ReturnType<typeof getProjectsProjectIdModels>>,
            TError,
            TData
        >
        axios?: AxiosRequestConfig
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions, axios: axiosOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getGetProjectsProjectIdModelsQueryKey(projectId, params)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getProjectsProjectIdModels>>
    > = ({ signal }) =>
        getProjectsProjectIdModels(projectId, params, {
            signal,
            ...axiosOptions,
        })

    const query = useQuery<
        Awaited<ReturnType<typeof getProjectsProjectIdModels>>,
        TError,
        TData
    >(queryKey, queryFn, { enabled: !!projectId, ...queryOptions })

    return {
        queryKey,
        ...query,
    }
}

/**
 * @summary Add model repository
 */
export const putProjectsProjectIdModels = (
    projectId: number,
    modelRepository: ModelRepository[],
    options?: AxiosRequestConfig
): Promise<AxiosResponse<PutProjectsProjectIdModels201>> => {
    return axios.put(`/projects/${projectId}/models`, modelRepository, options)
}

export type PutProjectsProjectIdModelsMutationResult = NonNullable<
    Awaited<ReturnType<typeof putProjectsProjectIdModels>>
>
export type PutProjectsProjectIdModelsMutationBody = ModelRepository[]
export type PutProjectsProjectIdModelsMutationError = AxiosError<unknown>

export const usePutProjectsProjectIdModels = <
    TError = AxiosError<unknown>,
    TContext = unknown
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof putProjectsProjectIdModels>>,
        TError,
        { projectId: number; data: ModelRepository[] },
        TContext
    >
    axios?: AxiosRequestConfig
}) => {
    const { mutation: mutationOptions, axios: axiosOptions } = options ?? {}

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof putProjectsProjectIdModels>>,
        { projectId: number; data: ModelRepository[] }
    > = (props) => {
        const { projectId, data } = props ?? {}

        return putProjectsProjectIdModels(projectId, data, axiosOptions)
    }

    return useMutation<
        Awaited<ReturnType<typeof putProjectsProjectIdModels>>,
        TError,
        { projectId: number; data: ModelRepository[] },
        TContext
    >(mutationFn, mutationOptions)
}
/**
 * @summary Returns model entry for given ID
 */
export const getProjectsProjectIdModelsModelRepositoryId = (
    projectId: number,
    modelRepositoryId: number,
    options?: AxiosRequestConfig
): Promise<AxiosResponse<ModelRepository>> => {
    return axios.get(
        `/projects/${projectId}/models/${modelRepositoryId}`,
        options
    )
}

export const getGetProjectsProjectIdModelsModelRepositoryIdQueryKey = (
    projectId: number,
    modelRepositoryId: number
) => [`/projects/${projectId}/models/${modelRepositoryId}`]

export type GetProjectsProjectIdModelsModelRepositoryIdQueryResult =
    NonNullable<
        Awaited<ReturnType<typeof getProjectsProjectIdModelsModelRepositoryId>>
    >
export type GetProjectsProjectIdModelsModelRepositoryIdQueryError =
    AxiosError<unknown>

export const useGetProjectsProjectIdModelsModelRepositoryId = <
    TData = Awaited<
        ReturnType<typeof getProjectsProjectIdModelsModelRepositoryId>
    >,
    TError = AxiosError<unknown>
>(
    projectId: number,
    modelRepositoryId: number,
    options?: {
        query?: UseQueryOptions<
            Awaited<
                ReturnType<typeof getProjectsProjectIdModelsModelRepositoryId>
            >,
            TError,
            TData
        >
        axios?: AxiosRequestConfig
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions, axios: axiosOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getGetProjectsProjectIdModelsModelRepositoryIdQueryKey(
            projectId,
            modelRepositoryId
        )

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getProjectsProjectIdModelsModelRepositoryId>>
    > = ({ signal }) =>
        getProjectsProjectIdModelsModelRepositoryId(
            projectId,
            modelRepositoryId,
            { signal, ...axiosOptions }
        )

    const query = useQuery<
        Awaited<ReturnType<typeof getProjectsProjectIdModelsModelRepositoryId>>,
        TError,
        TData
    >(queryKey, queryFn, {
        enabled: !!(projectId && modelRepositoryId),
        ...queryOptions,
    })

    return {
        queryKey,
        ...query,
    }
}

/**
 * @summary Update model repository
 */
export const postProjectsProjectIdModelsModelRepositoryId = (
    projectId: number,
    modelRepositoryId: number,
    modelRepository: ModelRepository,
    options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> => {
    return axios.post(
        `/projects/${projectId}/models/${modelRepositoryId}`,
        modelRepository,
        options
    )
}

export type PostProjectsProjectIdModelsModelRepositoryIdMutationResult =
    NonNullable<
        Awaited<ReturnType<typeof postProjectsProjectIdModelsModelRepositoryId>>
    >
export type PostProjectsProjectIdModelsModelRepositoryIdMutationBody =
    ModelRepository
export type PostProjectsProjectIdModelsModelRepositoryIdMutationError =
    AxiosError<unknown>

export const usePostProjectsProjectIdModelsModelRepositoryId = <
    TError = AxiosError<unknown>,
    TContext = unknown
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<
            ReturnType<typeof postProjectsProjectIdModelsModelRepositoryId>
        >,
        TError,
        { projectId: number; modelRepositoryId: number; data: ModelRepository },
        TContext
    >
    axios?: AxiosRequestConfig
}) => {
    const { mutation: mutationOptions, axios: axiosOptions } = options ?? {}

    const mutationFn: MutationFunction<
        Awaited<
            ReturnType<typeof postProjectsProjectIdModelsModelRepositoryId>
        >,
        { projectId: number; modelRepositoryId: number; data: ModelRepository }
    > = (props) => {
        const { projectId, modelRepositoryId, data } = props ?? {}

        return postProjectsProjectIdModelsModelRepositoryId(
            projectId,
            modelRepositoryId,
            data,
            axiosOptions
        )
    }

    return useMutation<
        Awaited<
            ReturnType<typeof postProjectsProjectIdModelsModelRepositoryId>
        >,
        TError,
        { projectId: number; modelRepositoryId: number; data: ModelRepository },
        TContext
    >(mutationFn, mutationOptions)
}
/**
 * @summary Returns all runs for a given project
 */
export const getProjectsProjectIdRuns = (
    projectId: number,
    params?: GetProjectsProjectIdRunsParams,
    options?: AxiosRequestConfig
): Promise<AxiosResponse<GetProjectsProjectIdRuns200>> => {
    return axios.get(`/projects/${projectId}/runs`, {
        params,
        ...options,
    })
}

export const getGetProjectsProjectIdRunsQueryKey = (
    projectId: number,
    params?: GetProjectsProjectIdRunsParams
) => [`/projects/${projectId}/runs`, ...(params ? [params] : [])]

export type GetProjectsProjectIdRunsQueryResult = NonNullable<
    Awaited<ReturnType<typeof getProjectsProjectIdRuns>>
>
export type GetProjectsProjectIdRunsQueryError = AxiosError<unknown>

export const useGetProjectsProjectIdRuns = <
    TData = Awaited<ReturnType<typeof getProjectsProjectIdRuns>>,
    TError = AxiosError<unknown>
>(
    projectId: number,
    params?: GetProjectsProjectIdRunsParams,
    options?: {
        query?: UseQueryOptions<
            Awaited<ReturnType<typeof getProjectsProjectIdRuns>>,
            TError,
            TData
        >
        axios?: AxiosRequestConfig
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions, axios: axiosOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getGetProjectsProjectIdRunsQueryKey(projectId, params)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getProjectsProjectIdRuns>>
    > = ({ signal }) =>
        getProjectsProjectIdRuns(projectId, params, { signal, ...axiosOptions })

    const query = useQuery<
        Awaited<ReturnType<typeof getProjectsProjectIdRuns>>,
        TError,
        TData
    >(queryKey, queryFn, { enabled: !!projectId, ...queryOptions })

    return {
        queryKey,
        ...query,
    }
}

/**
 * @summary Return a curation of projects tailored for a specific user with a set of search parameters
 */
export const getProjectsUserUserIdSearch = (
    userId: number,
    params?: GetProjectsUserUserIdSearchParams,
    options?: AxiosRequestConfig
): Promise<AxiosResponse<GetProjectsUserUserIdSearch200>> => {
    return axios.get(`/projects/user/${userId}/search`, {
        params,
        ...options,
    })
}

export const getGetProjectsUserUserIdSearchQueryKey = (
    userId: number,
    params?: GetProjectsUserUserIdSearchParams
) => [`/projects/user/${userId}/search`, ...(params ? [params] : [])]

export type GetProjectsUserUserIdSearchQueryResult = NonNullable<
    Awaited<ReturnType<typeof getProjectsUserUserIdSearch>>
>
export type GetProjectsUserUserIdSearchQueryError = AxiosError<unknown>

export const useGetProjectsUserUserIdSearch = <
    TData = Awaited<ReturnType<typeof getProjectsUserUserIdSearch>>,
    TError = AxiosError<unknown>
>(
    userId: number,
    params?: GetProjectsUserUserIdSearchParams,
    options?: {
        query?: UseQueryOptions<
            Awaited<ReturnType<typeof getProjectsUserUserIdSearch>>,
            TError,
            TData
        >
        axios?: AxiosRequestConfig
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions, axios: axiosOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getGetProjectsUserUserIdSearchQueryKey(userId, params)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getProjectsUserUserIdSearch>>
    > = ({ signal }) =>
        getProjectsUserUserIdSearch(userId, params, { signal, ...axiosOptions })

    const query = useQuery<
        Awaited<ReturnType<typeof getProjectsUserUserIdSearch>>,
        TError,
        TData
    >(queryKey, queryFn, { enabled: !!userId, ...queryOptions })

    return {
        queryKey,
        ...query,
    }
}

/**
 * @summary Get all User group (admin only)
 */
export const getGroups = (
    params?: GetGroupsParams,
    options?: AxiosRequestConfig
): Promise<AxiosResponse<GetGroups200>> => {
    return axios.get(`/groups`, {
        params,
        ...options,
    })
}

export const getGetGroupsQueryKey = (params?: GetGroupsParams) => [
    `/groups`,
    ...(params ? [params] : []),
]

export type GetGroupsQueryResult = NonNullable<
    Awaited<ReturnType<typeof getGroups>>
>
export type GetGroupsQueryError = AxiosError<unknown>

export const useGetGroups = <
    TData = Awaited<ReturnType<typeof getGroups>>,
    TError = AxiosError<unknown>
>(
    params?: GetGroupsParams,
    options?: {
        query?: UseQueryOptions<
            Awaited<ReturnType<typeof getGroups>>,
            TError,
            TData
        >
        axios?: AxiosRequestConfig
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions, axios: axiosOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getGetGroupsQueryKey(params)

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getGroups>>> = ({
        signal,
    }) => getGroups(params, { signal, ...axiosOptions })

    const query = useQuery<
        Awaited<ReturnType<typeof getGroups>>,
        TError,
        TData
    >(queryKey, queryFn, queryOptions)

    return {
        queryKey,
        ...query,
    }
}

/**
 * @summary Create a new user group
 */
export const putGroups = (
    userGroup: UserGroup,
    options?: AxiosRequestConfig
): Promise<AxiosResponse<PutGroups201>> => {
    return axios.put(`/groups`, userGroup, options)
}

export type PutGroupsMutationResult = NonNullable<
    Awaited<ReturnType<typeof putGroups>>
>
export type PutGroupsMutationBody = UserGroup
export type PutGroupsMutationError = AxiosError<unknown>

export const usePutGroups = <
    TError = AxiosError<unknown>,
    TContext = unknown
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof putGroups>>,
        TError,
        { data: UserGroup },
        TContext
    >
    axios?: AxiosRequestConfig
}) => {
    const { mutation: mutationOptions, axios: axiosOptions } = options ?? {}

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof putGroups>>,
        { data: UserGroup }
    > = (props) => {
        const { data } = props ?? {}

        return putGroups(data, axiosOptions)
    }

    return useMutation<
        Awaited<ReturnType<typeof putGroups>>,
        TError,
        { data: UserGroup },
        TContext
    >(mutationFn, mutationOptions)
}
/**
 * @summary Get Group information
 */
export const getGroupsGroupId = (
    groupId: number,
    options?: AxiosRequestConfig
): Promise<AxiosResponse<UserGroup>> => {
    return axios.get(`/groups/${groupId}`, options)
}

export const getGetGroupsGroupIdQueryKey = (groupId: number) => [
    `/groups/${groupId}`,
]

export type GetGroupsGroupIdQueryResult = NonNullable<
    Awaited<ReturnType<typeof getGroupsGroupId>>
>
export type GetGroupsGroupIdQueryError = AxiosError<unknown>

export const useGetGroupsGroupId = <
    TData = Awaited<ReturnType<typeof getGroupsGroupId>>,
    TError = AxiosError<unknown>
>(
    groupId: number,
    options?: {
        query?: UseQueryOptions<
            Awaited<ReturnType<typeof getGroupsGroupId>>,
            TError,
            TData
        >
        axios?: AxiosRequestConfig
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions, axios: axiosOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ?? getGetGroupsGroupIdQueryKey(groupId)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getGroupsGroupId>>
    > = ({ signal }) => getGroupsGroupId(groupId, { signal, ...axiosOptions })

    const query = useQuery<
        Awaited<ReturnType<typeof getGroupsGroupId>>,
        TError,
        TData
    >(queryKey, queryFn, { enabled: !!groupId, ...queryOptions })

    return {
        queryKey,
        ...query,
    }
}

/**
 * @summary Update group
 */
export const postGroupsGroupId = (
    groupId: number,
    userGroup: UserGroup,
    options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> => {
    return axios.post(`/groups/${groupId}`, userGroup, options)
}

export type PostGroupsGroupIdMutationResult = NonNullable<
    Awaited<ReturnType<typeof postGroupsGroupId>>
>
export type PostGroupsGroupIdMutationBody = UserGroup
export type PostGroupsGroupIdMutationError = AxiosError<unknown>

export const usePostGroupsGroupId = <
    TError = AxiosError<unknown>,
    TContext = unknown
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof postGroupsGroupId>>,
        TError,
        { groupId: number; data: UserGroup },
        TContext
    >
    axios?: AxiosRequestConfig
}) => {
    const { mutation: mutationOptions, axios: axiosOptions } = options ?? {}

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof postGroupsGroupId>>,
        { groupId: number; data: UserGroup }
    > = (props) => {
        const { groupId, data } = props ?? {}

        return postGroupsGroupId(groupId, data, axiosOptions)
    }

    return useMutation<
        Awaited<ReturnType<typeof postGroupsGroupId>>,
        TError,
        { groupId: number; data: UserGroup },
        TContext
    >(mutationFn, mutationOptions)
}
/**
 * @summary Get list of organizations (admin only)
 */
export const getOrganizations = (
    params?: GetOrganizationsParams,
    options?: AxiosRequestConfig
): Promise<AxiosResponse<GetOrganizations200>> => {
    return axios.get(`/organizations`, {
        params,
        ...options,
    })
}

export const getGetOrganizationsQueryKey = (
    params?: GetOrganizationsParams
) => [`/organizations`, ...(params ? [params] : [])]

export type GetOrganizationsQueryResult = NonNullable<
    Awaited<ReturnType<typeof getOrganizations>>
>
export type GetOrganizationsQueryError = AxiosError<unknown>

export const useGetOrganizations = <
    TData = Awaited<ReturnType<typeof getOrganizations>>,
    TError = AxiosError<unknown>
>(
    params?: GetOrganizationsParams,
    options?: {
        query?: UseQueryOptions<
            Awaited<ReturnType<typeof getOrganizations>>,
            TError,
            TData
        >
        axios?: AxiosRequestConfig
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions, axios: axiosOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ?? getGetOrganizationsQueryKey(params)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getOrganizations>>
    > = ({ signal }) => getOrganizations(params, { signal, ...axiosOptions })

    const query = useQuery<
        Awaited<ReturnType<typeof getOrganizations>>,
        TError,
        TData
    >(queryKey, queryFn, queryOptions)

    return {
        queryKey,
        ...query,
    }
}

/**
 * @summary Add organization
 */
export const putOrganizations = (
    organization: Organization,
    options?: AxiosRequestConfig
): Promise<AxiosResponse<PutOrganizations201>> => {
    return axios.put(`/organizations`, organization, options)
}

export type PutOrganizationsMutationResult = NonNullable<
    Awaited<ReturnType<typeof putOrganizations>>
>
export type PutOrganizationsMutationBody = Organization
export type PutOrganizationsMutationError = AxiosError<unknown>

export const usePutOrganizations = <
    TError = AxiosError<unknown>,
    TContext = unknown
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof putOrganizations>>,
        TError,
        { data: Organization },
        TContext
    >
    axios?: AxiosRequestConfig
}) => {
    const { mutation: mutationOptions, axios: axiosOptions } = options ?? {}

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof putOrganizations>>,
        { data: Organization }
    > = (props) => {
        const { data } = props ?? {}

        return putOrganizations(data, axiosOptions)
    }

    return useMutation<
        Awaited<ReturnType<typeof putOrganizations>>,
        TError,
        { data: Organization },
        TContext
    >(mutationFn, mutationOptions)
}
/**
 * @summary Get info on specified organization
 */
export const getOrganizationsOrganizationId = (
    organizationId: number,
    options?: AxiosRequestConfig
): Promise<AxiosResponse<Organization>> => {
    return axios.get(`/organizations/${organizationId}`, options)
}

export const getGetOrganizationsOrganizationIdQueryKey = (
    organizationId: number
) => [`/organizations/${organizationId}`]

export type GetOrganizationsOrganizationIdQueryResult = NonNullable<
    Awaited<ReturnType<typeof getOrganizationsOrganizationId>>
>
export type GetOrganizationsOrganizationIdQueryError = AxiosError<unknown>

export const useGetOrganizationsOrganizationId = <
    TData = Awaited<ReturnType<typeof getOrganizationsOrganizationId>>,
    TError = AxiosError<unknown>
>(
    organizationId: number,
    options?: {
        query?: UseQueryOptions<
            Awaited<ReturnType<typeof getOrganizationsOrganizationId>>,
            TError,
            TData
        >
        axios?: AxiosRequestConfig
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions, axios: axiosOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getGetOrganizationsOrganizationIdQueryKey(organizationId)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getOrganizationsOrganizationId>>
    > = ({ signal }) =>
        getOrganizationsOrganizationId(organizationId, {
            signal,
            ...axiosOptions,
        })

    const query = useQuery<
        Awaited<ReturnType<typeof getOrganizationsOrganizationId>>,
        TError,
        TData
    >(queryKey, queryFn, { enabled: !!organizationId, ...queryOptions })

    return {
        queryKey,
        ...query,
    }
}

/**
 * @summary Update organization info
 */
export const postOrganizationsOrganizationId = (
    organizationId: number,
    organization: Organization,
    options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> => {
    return axios.post(`/organizations/${organizationId}`, organization, options)
}

export type PostOrganizationsOrganizationIdMutationResult = NonNullable<
    Awaited<ReturnType<typeof postOrganizationsOrganizationId>>
>
export type PostOrganizationsOrganizationIdMutationBody = Organization
export type PostOrganizationsOrganizationIdMutationError = AxiosError<unknown>

export const usePostOrganizationsOrganizationId = <
    TError = AxiosError<unknown>,
    TContext = unknown
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof postOrganizationsOrganizationId>>,
        TError,
        { organizationId: number; data: Organization },
        TContext
    >
    axios?: AxiosRequestConfig
}) => {
    const { mutation: mutationOptions, axios: axiosOptions } = options ?? {}

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof postOrganizationsOrganizationId>>,
        { organizationId: number; data: Organization }
    > = (props) => {
        const { organizationId, data } = props ?? {}

        return postOrganizationsOrganizationId(
            organizationId,
            data,
            axiosOptions
        )
    }

    return useMutation<
        Awaited<ReturnType<typeof postOrganizationsOrganizationId>>,
        TError,
        { organizationId: number; data: Organization },
        TContext
    >(mutationFn, mutationOptions)
}
/**
 * @summary Get all labels (admin only)
 */
export const getLabels = (
    params?: GetLabelsParams,
    options?: AxiosRequestConfig
): Promise<AxiosResponse<GetLabels200>> => {
    return axios.get(`/labels`, {
        params,
        ...options,
    })
}

export const getGetLabelsQueryKey = (params?: GetLabelsParams) => [
    `/labels`,
    ...(params ? [params] : []),
]

export type GetLabelsQueryResult = NonNullable<
    Awaited<ReturnType<typeof getLabels>>
>
export type GetLabelsQueryError = AxiosError<unknown>

export const useGetLabels = <
    TData = Awaited<ReturnType<typeof getLabels>>,
    TError = AxiosError<unknown>
>(
    params?: GetLabelsParams,
    options?: {
        query?: UseQueryOptions<
            Awaited<ReturnType<typeof getLabels>>,
            TError,
            TData
        >
        axios?: AxiosRequestConfig
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions, axios: axiosOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getGetLabelsQueryKey(params)

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getLabels>>> = ({
        signal,
    }) => getLabels(params, { signal, ...axiosOptions })

    const query = useQuery<
        Awaited<ReturnType<typeof getLabels>>,
        TError,
        TData
    >(queryKey, queryFn, queryOptions)

    return {
        queryKey,
        ...query,
    }
}

/**
 * @summary add label
 */
export const putLabels = (
    label: Label,
    options?: AxiosRequestConfig
): Promise<AxiosResponse<Label>> => {
    return axios.put(`/labels`, label, options)
}

export type PutLabelsMutationResult = NonNullable<
    Awaited<ReturnType<typeof putLabels>>
>
export type PutLabelsMutationBody = Label
export type PutLabelsMutationError = AxiosError<unknown>

export const usePutLabels = <
    TError = AxiosError<unknown>,
    TContext = unknown
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof putLabels>>,
        TError,
        { data: Label },
        TContext
    >
    axios?: AxiosRequestConfig
}) => {
    const { mutation: mutationOptions, axios: axiosOptions } = options ?? {}

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof putLabels>>,
        { data: Label }
    > = (props) => {
        const { data } = props ?? {}

        return putLabels(data, axiosOptions)
    }

    return useMutation<
        Awaited<ReturnType<typeof putLabels>>,
        TError,
        { data: Label },
        TContext
    >(mutationFn, mutationOptions)
}
/**
 * @summary Return a collection of labels appropriate for the user's search
 */
export const getLabelsUserIdSearch = (
    userId: number,
    params?: GetLabelsUserIdSearchParams,
    options?: AxiosRequestConfig
): Promise<AxiosResponse<GetLabelsUserIdSearch200>> => {
    return axios.get(`/labels/${userId}/search`, {
        params,
        ...options,
    })
}

export const getGetLabelsUserIdSearchQueryKey = (
    userId: number,
    params?: GetLabelsUserIdSearchParams
) => [`/labels/${userId}/search`, ...(params ? [params] : [])]

export type GetLabelsUserIdSearchQueryResult = NonNullable<
    Awaited<ReturnType<typeof getLabelsUserIdSearch>>
>
export type GetLabelsUserIdSearchQueryError = AxiosError<unknown>

export const useGetLabelsUserIdSearch = <
    TData = Awaited<ReturnType<typeof getLabelsUserIdSearch>>,
    TError = AxiosError<unknown>
>(
    userId: number,
    params?: GetLabelsUserIdSearchParams,
    options?: {
        query?: UseQueryOptions<
            Awaited<ReturnType<typeof getLabelsUserIdSearch>>,
            TError,
            TData
        >
        axios?: AxiosRequestConfig
    }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions, axios: axiosOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ??
        getGetLabelsUserIdSearchQueryKey(userId, params)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getLabelsUserIdSearch>>
    > = ({ signal }) =>
        getLabelsUserIdSearch(userId, params, { signal, ...axiosOptions })

    const query = useQuery<
        Awaited<ReturnType<typeof getLabelsUserIdSearch>>,
        TError,
        TData
    >(queryKey, queryFn, { enabled: !!userId, ...queryOptions })

    return {
        queryKey,
        ...query,
    }
}
