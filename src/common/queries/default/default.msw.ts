/**
 * Generated by orval v6.8.1 🍺
 * Do not edit manually.
 * Mantik minimal API
 * The API serves the front end with all necessary information on projects, and users.
 * OpenAPI spec version: 0.1.0
 */
import { rest } from 'msw'
import { faker } from '@faker-js/faker'

export const getGetUsersMock = () =>
    [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(() => ({
        userId: faker.datatype.number(),
        name: faker.random.word(),
        email: faker.random.word(),
    }))

export const getPutUsersMock = () => ({
    userId: faker.helpers.arrayElement([faker.datatype.number(), undefined]),
})

export const getGetUsersUserIdMock = () => ({
    userId: faker.datatype.number(),
    name: faker.random.word(),
    email: faker.random.word(),
})

export const getGetUsersUserIdSettingsMock = () => ({
    settings: faker.helpers.arrayElement([
        {
            user: {
                userId: faker.datatype.number(),
                name: faker.random.word(),
                email: faker.random.word(),
            },
            password: faker.random.word(),
            token: faker.helpers.arrayElement([faker.random.word(), undefined]),
            paymentInfo: faker.helpers.arrayElement([{}, undefined]),
            connections: faker.helpers.arrayElement([
                [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(
                    () => ({
                        connectionId: faker.datatype.number(),
                        connectionName: faker.random.word(),
                        connectionProvider: faker.random.word(),
                        loginName: faker.helpers.arrayElement([
                            faker.random.word(),
                            undefined,
                        ]),
                        password: faker.helpers.arrayElement([
                            faker.random.word(),
                            undefined,
                        ]),
                        token: faker.helpers.arrayElement([
                            faker.random.word(),
                            undefined,
                        ]),
                        authMethod: faker.helpers.arrayElement([
                            faker.random.word(),
                            undefined,
                        ]),
                    })
                ),
                undefined,
            ]),
        },
        undefined,
    ]),
})

export const getGetProjectsMock = () =>
    [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(() => ({
        projectId: faker.random.word(),
        owner: {
            userId: faker.datatype.number(),
            name: faker.random.word(),
            email: faker.random.word(),
        },
        members: faker.helpers.arrayElement([
            [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(() => ({
                userId: faker.datatype.number(),
                name: faker.random.word(),
                email: faker.random.word(),
            })),
            undefined,
        ]),
        groups: faker.helpers.arrayElement([
            [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(() => ({
                userGroupId: faker.random.word(),
                name: faker.random.word(),
                admin: {
                    userId: faker.datatype.number(),
                    name: faker.random.word(),
                    email: faker.random.word(),
                },
                members: faker.helpers.arrayElement([
                    [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(
                        () => ({
                            userId: faker.datatype.number(),
                            name: faker.random.word(),
                            email: faker.random.word(),
                        })
                    ),
                    undefined,
                ]),
            })),
            undefined,
        ]),
        codeRepositories: faker.helpers.arrayElement([
            [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(() => ({
                codeRepositoryId: faker.random.word(),
                uri: faker.random.word(),
                description: faker.helpers.arrayElement([
                    faker.random.word(),
                    undefined,
                ]),
                labels: faker.helpers.arrayElement([
                    [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(
                        () => ({
                            key: faker.random.word(),
                            value: faker.random.word(),
                        })
                    ),
                    undefined,
                ]),
            })),
            undefined,
        ]),
        experimentRepositories: faker.helpers.arrayElement([
            [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(() => ({
                experimentId: faker.random.word(),
                name: faker.helpers.arrayElement([
                    faker.random.word(),
                    undefined,
                ]),
                artifact_location: faker.helpers.arrayElement([
                    faker.random.word(),
                    undefined,
                ]),
                lifecycle_stage: faker.helpers.arrayElement([
                    faker.random.word(),
                    undefined,
                ]),
                last_update_time: faker.helpers.arrayElement([
                    faker.datatype.number(),
                    undefined,
                ]),
                creation_time: faker.helpers.arrayElement([
                    faker.datatype.number(),
                    undefined,
                ]),
                labels: faker.helpers.arrayElement([
                    [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(
                        () => ({
                            key: faker.random.word(),
                            value: faker.random.word(),
                        })
                    ),
                    undefined,
                ]),
            })),
            undefined,
        ]),
        dataRepositories: faker.helpers.arrayElement([
            [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(() => ({
                dataRepositoryId: faker.random.word(),
                uri: faker.random.word(),
                description: faker.helpers.arrayElement([
                    faker.random.word(),
                    undefined,
                ]),
                labels: faker.helpers.arrayElement([
                    [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(
                        () => ({
                            key: faker.random.word(),
                            value: faker.random.word(),
                        })
                    ),
                    undefined,
                ]),
            })),
            undefined,
        ]),
    }))

export const getPutProjectsMock = () => ({
    projectId: faker.helpers.arrayElement([faker.random.word(), undefined]),
})

export const getGetProjectsUserUserIdMock = () =>
    [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(() => ({
        projectId: faker.random.word(),
        owner: {
            userId: faker.datatype.number(),
            name: faker.random.word(),
            email: faker.random.word(),
        },
        members: faker.helpers.arrayElement([
            [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(() => ({
                userId: faker.datatype.number(),
                name: faker.random.word(),
                email: faker.random.word(),
            })),
            undefined,
        ]),
        groups: faker.helpers.arrayElement([
            [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(() => ({
                userGroupId: faker.random.word(),
                name: faker.random.word(),
                admin: {
                    userId: faker.datatype.number(),
                    name: faker.random.word(),
                    email: faker.random.word(),
                },
                members: faker.helpers.arrayElement([
                    [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(
                        () => ({
                            userId: faker.datatype.number(),
                            name: faker.random.word(),
                            email: faker.random.word(),
                        })
                    ),
                    undefined,
                ]),
            })),
            undefined,
        ]),
        codeRepositories: faker.helpers.arrayElement([
            [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(() => ({
                codeRepositoryId: faker.random.word(),
                uri: faker.random.word(),
                description: faker.helpers.arrayElement([
                    faker.random.word(),
                    undefined,
                ]),
                labels: faker.helpers.arrayElement([
                    [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(
                        () => ({
                            key: faker.random.word(),
                            value: faker.random.word(),
                        })
                    ),
                    undefined,
                ]),
            })),
            undefined,
        ]),
        experimentRepositories: faker.helpers.arrayElement([
            [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(() => ({
                experimentId: faker.random.word(),
                name: faker.helpers.arrayElement([
                    faker.random.word(),
                    undefined,
                ]),
                artifact_location: faker.helpers.arrayElement([
                    faker.random.word(),
                    undefined,
                ]),
                lifecycle_stage: faker.helpers.arrayElement([
                    faker.random.word(),
                    undefined,
                ]),
                last_update_time: faker.helpers.arrayElement([
                    faker.datatype.number(),
                    undefined,
                ]),
                creation_time: faker.helpers.arrayElement([
                    faker.datatype.number(),
                    undefined,
                ]),
                labels: faker.helpers.arrayElement([
                    [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(
                        () => ({
                            key: faker.random.word(),
                            value: faker.random.word(),
                        })
                    ),
                    undefined,
                ]),
            })),
            undefined,
        ]),
        dataRepositories: faker.helpers.arrayElement([
            [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(() => ({
                dataRepositoryId: faker.random.word(),
                uri: faker.random.word(),
                description: faker.helpers.arrayElement([
                    faker.random.word(),
                    undefined,
                ]),
                labels: faker.helpers.arrayElement([
                    [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(
                        () => ({
                            key: faker.random.word(),
                            value: faker.random.word(),
                        })
                    ),
                    undefined,
                ]),
            })),
            undefined,
        ]),
    }))

export const getGetProjectsProjectIdMock = () => ({
    projectId: faker.random.word(),
    owner: {
        userId: faker.datatype.number(),
        name: faker.random.word(),
        email: faker.random.word(),
    },
    members: faker.helpers.arrayElement([
        [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(() => ({
            userId: faker.datatype.number(),
            name: faker.random.word(),
            email: faker.random.word(),
        })),
        undefined,
    ]),
    groups: faker.helpers.arrayElement([
        [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(() => ({
            userGroupId: faker.random.word(),
            name: faker.random.word(),
            admin: {
                userId: faker.datatype.number(),
                name: faker.random.word(),
                email: faker.random.word(),
            },
            members: faker.helpers.arrayElement([
                [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(
                    () => ({
                        userId: faker.datatype.number(),
                        name: faker.random.word(),
                        email: faker.random.word(),
                    })
                ),
                undefined,
            ]),
        })),
        undefined,
    ]),
    codeRepositories: faker.helpers.arrayElement([
        [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(() => ({
            codeRepositoryId: faker.random.word(),
            uri: faker.random.word(),
            description: faker.helpers.arrayElement([
                faker.random.word(),
                undefined,
            ]),
            labels: faker.helpers.arrayElement([
                [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(
                    () => ({
                        key: faker.random.word(),
                        value: faker.random.word(),
                    })
                ),
                undefined,
            ]),
        })),
        undefined,
    ]),
    experimentRepositories: faker.helpers.arrayElement([
        [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(() => ({
            experimentId: faker.random.word(),
            name: faker.helpers.arrayElement([faker.random.word(), undefined]),
            artifact_location: faker.helpers.arrayElement([
                faker.random.word(),
                undefined,
            ]),
            lifecycle_stage: faker.helpers.arrayElement([
                faker.random.word(),
                undefined,
            ]),
            last_update_time: faker.helpers.arrayElement([
                faker.datatype.number(),
                undefined,
            ]),
            creation_time: faker.helpers.arrayElement([
                faker.datatype.number(),
                undefined,
            ]),
            labels: faker.helpers.arrayElement([
                [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(
                    () => ({
                        key: faker.random.word(),
                        value: faker.random.word(),
                    })
                ),
                undefined,
            ]),
        })),
        undefined,
    ]),
    dataRepositories: faker.helpers.arrayElement([
        [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(() => ({
            dataRepositoryId: faker.random.word(),
            uri: faker.random.word(),
            description: faker.helpers.arrayElement([
                faker.random.word(),
                undefined,
            ]),
            labels: faker.helpers.arrayElement([
                [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(
                    () => ({
                        key: faker.random.word(),
                        value: faker.random.word(),
                    })
                ),
                undefined,
            ]),
        })),
        undefined,
    ]),
})

export const getGetProjectsProjectIdCodeMock = () =>
    [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(() => ({
        codeRepositoryId: faker.random.word(),
        uri: faker.random.word(),
        description: faker.helpers.arrayElement([
            faker.random.word(),
            undefined,
        ]),
        labels: faker.helpers.arrayElement([
            [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(() => ({
                key: faker.random.word(),
                value: faker.random.word(),
            })),
            undefined,
        ]),
    }))

export const getPutProjectsProjectIdCodeMock = () => ({
    codeRepositoryId: faker.helpers.arrayElement([
        faker.random.word(),
        undefined,
    ]),
})

export const getGetProjectsProjectIdCodeCodeRepositoryIdMock = () => ({
    codeRepositoryId: faker.random.word(),
    uri: faker.random.word(),
    description: faker.helpers.arrayElement([faker.random.word(), undefined]),
    labels: faker.helpers.arrayElement([
        [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(() => ({
            key: faker.random.word(),
            value: faker.random.word(),
        })),
        undefined,
    ]),
})

export const getGetProjectsProjectIdDataMock = () =>
    [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(() => ({
        dataRepositoryId: faker.random.word(),
        uri: faker.random.word(),
        description: faker.helpers.arrayElement([
            faker.random.word(),
            undefined,
        ]),
        labels: faker.helpers.arrayElement([
            [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(() => ({
                key: faker.random.word(),
                value: faker.random.word(),
            })),
            undefined,
        ]),
    }))

export const getPutProjectsProjectIdDataMock = () => ({
    dataRepositoryId: faker.helpers.arrayElement([
        faker.random.word(),
        undefined,
    ]),
})

export const getGetProjectsProjectIdDataDataRepositoryIdMock = () => ({
    dataRepositoryId: faker.random.word(),
    uri: faker.random.word(),
    description: faker.helpers.arrayElement([faker.random.word(), undefined]),
    labels: faker.helpers.arrayElement([
        [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(() => ({
            key: faker.random.word(),
            value: faker.random.word(),
        })),
        undefined,
    ]),
})

export const getGetProjectsProjectIdExperimentsMock = () =>
    [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(() => ({
        experimentId: faker.random.word(),
        name: faker.helpers.arrayElement([faker.random.word(), undefined]),
        artifact_location: faker.helpers.arrayElement([
            faker.random.word(),
            undefined,
        ]),
        lifecycle_stage: faker.helpers.arrayElement([
            faker.random.word(),
            undefined,
        ]),
        last_update_time: faker.helpers.arrayElement([
            faker.datatype.number(),
            undefined,
        ]),
        creation_time: faker.helpers.arrayElement([
            faker.datatype.number(),
            undefined,
        ]),
        labels: faker.helpers.arrayElement([
            [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(() => ({
                key: faker.random.word(),
                value: faker.random.word(),
            })),
            undefined,
        ]),
    }))

export const getPutProjectsProjectIdExperimentsMock = () => ({
    experimentRepositoryId: faker.helpers.arrayElement([
        faker.random.word(),
        undefined,
    ]),
})

export const getGetProjectsProjectIdExperimentsExperimentRepositoryIdMock =
    () => ({
        experimentId: faker.random.word(),
        name: faker.helpers.arrayElement([faker.random.word(), undefined]),
        artifact_location: faker.helpers.arrayElement([
            faker.random.word(),
            undefined,
        ]),
        lifecycle_stage: faker.helpers.arrayElement([
            faker.random.word(),
            undefined,
        ]),
        last_update_time: faker.helpers.arrayElement([
            faker.datatype.number(),
            undefined,
        ]),
        creation_time: faker.helpers.arrayElement([
            faker.datatype.number(),
            undefined,
        ]),
        labels: faker.helpers.arrayElement([
            [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(() => ({
                key: faker.random.word(),
                value: faker.random.word(),
            })),
            undefined,
        ]),
    })

export const getGetProjectsProjectIdModelsMock = () =>
    [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(() => ({
        modelRepositoryId: faker.random.word(),
        uri: faker.random.word(),
        description: faker.helpers.arrayElement([
            faker.random.word(),
            undefined,
        ]),
        git: faker.helpers.arrayElement([
            {
                codeRepositoryId: faker.random.word(),
                uri: faker.random.word(),
                description: faker.helpers.arrayElement([
                    faker.random.word(),
                    undefined,
                ]),
                labels: faker.helpers.arrayElement([
                    [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(
                        () => ({
                            key: faker.random.word(),
                            value: faker.random.word(),
                        })
                    ),
                    undefined,
                ]),
            },
            undefined,
        ]),
        commit: faker.helpers.arrayElement([faker.random.word(), undefined]),
        labels: faker.helpers.arrayElement([
            [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(() => ({
                key: faker.random.word(),
                value: faker.random.word(),
            })),
            undefined,
        ]),
    }))

export const getPutProjectsProjectIdModelsMock = () => ({
    modelRepositoryId: faker.helpers.arrayElement([
        faker.random.word(),
        undefined,
    ]),
})

export const getGetProjectsProjectIdModelsModelRepositoryIdMock = () => ({
    modelRepositoryId: faker.random.word(),
    uri: faker.random.word(),
    description: faker.helpers.arrayElement([faker.random.word(), undefined]),
    git: faker.helpers.arrayElement([
        {
            codeRepositoryId: faker.random.word(),
            uri: faker.random.word(),
            description: faker.helpers.arrayElement([
                faker.random.word(),
                undefined,
            ]),
            labels: faker.helpers.arrayElement([
                [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(
                    () => ({
                        key: faker.random.word(),
                        value: faker.random.word(),
                    })
                ),
                undefined,
            ]),
        },
        undefined,
    ]),
    commit: faker.helpers.arrayElement([faker.random.word(), undefined]),
    labels: faker.helpers.arrayElement([
        [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(() => ({
            key: faker.random.word(),
            value: faker.random.word(),
        })),
        undefined,
    ]),
})

export const getGetGroupsMock = () =>
    [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(() => ({
        userGroupId: faker.random.word(),
        name: faker.random.word(),
        admin: {
            userId: faker.datatype.number(),
            name: faker.random.word(),
            email: faker.random.word(),
        },
        members: faker.helpers.arrayElement([
            [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(() => ({
                userId: faker.datatype.number(),
                name: faker.random.word(),
                email: faker.random.word(),
            })),
            undefined,
        ]),
    }))

export const getPutGroupsMock = () => ({
    groupId: faker.helpers.arrayElement([faker.random.word(), undefined]),
})

export const getGetGroupsGroupIdMock = () => ({
    userGroupId: faker.random.word(),
    name: faker.random.word(),
    admin: {
        userId: faker.datatype.number(),
        name: faker.random.word(),
        email: faker.random.word(),
    },
    members: faker.helpers.arrayElement([
        [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(() => ({
            userId: faker.datatype.number(),
            name: faker.random.word(),
            email: faker.random.word(),
        })),
        undefined,
    ]),
})

export const getGetOrganizationsMock = () =>
    [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(() => ({
        organizationId: faker.random.word(),
        name: faker.random.word(),
        contact: {
            userId: faker.datatype.number(),
            name: faker.random.word(),
            email: faker.random.word(),
        },
        groups: faker.helpers.arrayElement([
            [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(() => ({
                userGroupId: faker.random.word(),
                name: faker.random.word(),
                admin: {
                    userId: faker.datatype.number(),
                    name: faker.random.word(),
                    email: faker.random.word(),
                },
                members: faker.helpers.arrayElement([
                    [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(
                        () => ({
                            userId: faker.datatype.number(),
                            name: faker.random.word(),
                            email: faker.random.word(),
                        })
                    ),
                    undefined,
                ]),
            })),
            undefined,
        ]),
        members: faker.helpers.arrayElement([
            [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(() => ({
                userId: faker.datatype.number(),
                name: faker.random.word(),
                email: faker.random.word(),
            })),
            undefined,
        ]),
    }))

export const getPutOrganizationsMock = () => ({
    organizationId: faker.helpers.arrayElement([
        faker.datatype.number(),
        undefined,
    ]),
})

export const getGetOrganizationsOrganizationIdMock = () => ({
    organizationId: faker.random.word(),
    name: faker.random.word(),
    contact: {
        userId: faker.datatype.number(),
        name: faker.random.word(),
        email: faker.random.word(),
    },
    groups: faker.helpers.arrayElement([
        [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(() => ({
            userGroupId: faker.random.word(),
            name: faker.random.word(),
            admin: {
                userId: faker.datatype.number(),
                name: faker.random.word(),
                email: faker.random.word(),
            },
            members: faker.helpers.arrayElement([
                [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(
                    () => ({
                        userId: faker.datatype.number(),
                        name: faker.random.word(),
                        email: faker.random.word(),
                    })
                ),
                undefined,
            ]),
        })),
        undefined,
    ]),
    members: faker.helpers.arrayElement([
        [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(() => ({
            userId: faker.datatype.number(),
            name: faker.random.word(),
            email: faker.random.word(),
        })),
        undefined,
    ]),
})

export const getDefaultMSW = () => [
    rest.get('*/users', (_req, res, ctx) => {
        return res(
            ctx.delay(1000),
            ctx.status(200, 'Mocked status'),
            ctx.json(getGetUsersMock())
        )
    }),
    rest.put('*/users', (_req, res, ctx) => {
        return res(
            ctx.delay(1000),
            ctx.status(200, 'Mocked status'),
            ctx.json(getPutUsersMock())
        )
    }),
    rest.get('*/users/:userId', (_req, res, ctx) => {
        return res(
            ctx.delay(1000),
            ctx.status(200, 'Mocked status'),
            ctx.json(getGetUsersUserIdMock())
        )
    }),
    rest.post('*/users/:userId', (_req, res, ctx) => {
        return res(ctx.delay(1000), ctx.status(200, 'Mocked status'))
    }),
    rest.get('*/users/:userId/settings', (_req, res, ctx) => {
        return res(
            ctx.delay(1000),
            ctx.status(200, 'Mocked status'),
            ctx.json(getGetUsersUserIdSettingsMock())
        )
    }),
    rest.post('*/users/:userId/settings', (_req, res, ctx) => {
        return res(ctx.delay(1000), ctx.status(200, 'Mocked status'))
    }),
    rest.get('*/projects', (_req, res, ctx) => {
        return res(
            ctx.delay(1000),
            ctx.status(200, 'Mocked status'),
            ctx.json(getGetProjectsMock())
        )
    }),
    rest.put('*/projects', (_req, res, ctx) => {
        return res(
            ctx.delay(1000),
            ctx.status(200, 'Mocked status'),
            ctx.json(getPutProjectsMock())
        )
    }),
    rest.get('*/projects/user/:userId', (_req, res, ctx) => {
        return res(
            ctx.delay(1000),
            ctx.status(200, 'Mocked status'),
            ctx.json(getGetProjectsUserUserIdMock())
        )
    }),
    rest.get('*/projects/:projectId', (_req, res, ctx) => {
        return res(
            ctx.delay(1000),
            ctx.status(200, 'Mocked status'),
            ctx.json(getGetProjectsProjectIdMock())
        )
    }),
    rest.post('*/projects/:projectId', (_req, res, ctx) => {
        return res(ctx.delay(1000), ctx.status(200, 'Mocked status'))
    }),
    rest.get('*/projects/:projectId/code', (_req, res, ctx) => {
        return res(
            ctx.delay(1000),
            ctx.status(200, 'Mocked status'),
            ctx.json(getGetProjectsProjectIdCodeMock())
        )
    }),
    rest.put('*/projects/:projectId/code', (_req, res, ctx) => {
        return res(
            ctx.delay(1000),
            ctx.status(200, 'Mocked status'),
            ctx.json(getPutProjectsProjectIdCodeMock())
        )
    }),
    rest.get(
        '*/projects/:projectId/code/:codeRepositoryId',
        (_req, res, ctx) => {
            return res(
                ctx.delay(1000),
                ctx.status(200, 'Mocked status'),
                ctx.json(getGetProjectsProjectIdCodeCodeRepositoryIdMock())
            )
        }
    ),
    rest.post(
        '*/projects/:projectId/code/:codeRepositoryId',
        (_req, res, ctx) => {
            return res(ctx.delay(1000), ctx.status(200, 'Mocked status'))
        }
    ),
    rest.get('*/projects/:projectId/data', (_req, res, ctx) => {
        return res(
            ctx.delay(1000),
            ctx.status(200, 'Mocked status'),
            ctx.json(getGetProjectsProjectIdDataMock())
        )
    }),
    rest.put('*/projects/:projectId/data', (_req, res, ctx) => {
        return res(
            ctx.delay(1000),
            ctx.status(200, 'Mocked status'),
            ctx.json(getPutProjectsProjectIdDataMock())
        )
    }),
    rest.get(
        '*/projects/:projectId/data/:dataRepositoryId',
        (_req, res, ctx) => {
            return res(
                ctx.delay(1000),
                ctx.status(200, 'Mocked status'),
                ctx.json(getGetProjectsProjectIdDataDataRepositoryIdMock())
            )
        }
    ),
    rest.post(
        '*/projects/:projectId/data/:dataRepositoryId',
        (_req, res, ctx) => {
            return res(ctx.delay(1000), ctx.status(200, 'Mocked status'))
        }
    ),
    rest.get('*/projects/:projectId/experiments', (_req, res, ctx) => {
        return res(
            ctx.delay(1000),
            ctx.status(200, 'Mocked status'),
            ctx.json(getGetProjectsProjectIdExperimentsMock())
        )
    }),
    rest.put('*/projects/:projectId/experiments', (_req, res, ctx) => {
        return res(
            ctx.delay(1000),
            ctx.status(200, 'Mocked status'),
            ctx.json(getPutProjectsProjectIdExperimentsMock())
        )
    }),
    rest.get(
        '*/projects/:projectId/experiments/:experimentRepositoryId',
        (_req, res, ctx) => {
            return res(
                ctx.delay(1000),
                ctx.status(200, 'Mocked status'),
                ctx.json(
                    getGetProjectsProjectIdExperimentsExperimentRepositoryIdMock()
                )
            )
        }
    ),
    rest.post(
        '*/projects/:projectId/experiments/:experimentRepositoryId',
        (_req, res, ctx) => {
            return res(ctx.delay(1000), ctx.status(200, 'Mocked status'))
        }
    ),
    rest.get('*/projects/:projectId/models', (_req, res, ctx) => {
        return res(
            ctx.delay(1000),
            ctx.status(200, 'Mocked status'),
            ctx.json(getGetProjectsProjectIdModelsMock())
        )
    }),
    rest.put('*/projects/:projectId/models', (_req, res, ctx) => {
        return res(
            ctx.delay(1000),
            ctx.status(200, 'Mocked status'),
            ctx.json(getPutProjectsProjectIdModelsMock())
        )
    }),
    rest.get(
        '*/projects/:projectId/models/:modelRepositoryId',
        (_req, res, ctx) => {
            return res(
                ctx.delay(1000),
                ctx.status(200, 'Mocked status'),
                ctx.json(getGetProjectsProjectIdModelsModelRepositoryIdMock())
            )
        }
    ),
    rest.post(
        '*/projects/:projectId/models/:modelRepositoryId',
        (_req, res, ctx) => {
            return res(ctx.delay(1000), ctx.status(200, 'Mocked status'))
        }
    ),
    rest.get('*/groups', (_req, res, ctx) => {
        return res(
            ctx.delay(1000),
            ctx.status(200, 'Mocked status'),
            ctx.json(getGetGroupsMock())
        )
    }),
    rest.put('*/groups', (_req, res, ctx) => {
        return res(
            ctx.delay(1000),
            ctx.status(200, 'Mocked status'),
            ctx.json(getPutGroupsMock())
        )
    }),
    rest.get('*/groups/:groupId', (_req, res, ctx) => {
        return res(
            ctx.delay(1000),
            ctx.status(200, 'Mocked status'),
            ctx.json(getGetGroupsGroupIdMock())
        )
    }),
    rest.post('*/groups/:groupId', (_req, res, ctx) => {
        return res(ctx.delay(1000), ctx.status(200, 'Mocked status'))
    }),
    rest.get('*/organizations', (_req, res, ctx) => {
        return res(
            ctx.delay(1000),
            ctx.status(200, 'Mocked status'),
            ctx.json(getGetOrganizationsMock())
        )
    }),
    rest.put('*/organizations', (_req, res, ctx) => {
        return res(
            ctx.delay(1000),
            ctx.status(200, 'Mocked status'),
            ctx.json(getPutOrganizationsMock())
        )
    }),
    rest.get('*/organizations/:organizationId', (_req, res, ctx) => {
        return res(
            ctx.delay(1000),
            ctx.status(200, 'Mocked status'),
            ctx.json(getGetOrganizationsOrganizationIdMock())
        )
    }),
    rest.post('*/organizations/:organizationId', (_req, res, ctx) => {
        return res(ctx.delay(1000), ctx.status(200, 'Mocked status'))
    }),
]
