openapi: 3.0.2
info:
    title: Mantik minimal API
    description: 'The API serves the front end with all necessary information on projects, and users.'
    version: 0.1.0
components:
    schemas:
        AddRun:
            type: object
            description: Necessary information reproduce a run
            properties:
                experimentRepository:
                    $ref: '#/components/schemas/ExperimentRepository'
                modelRepository:
                    $ref: '#/components/schemas/ModelRepository'
                dataRepository:
                    $ref: '#/components/schemas/DataRepository'
                connection:
                    $ref: '#/components/schemas/Connection'
        CodeRepository:
            type: object
            description: 'Represents a code repository, usually (but not exclusively) one of github, gitlab, bitbucket'
            properties:
                codeRepositoryId:
                    type: string
                uri:
                    type: string
                description:
                    type: string
                labels:
                    type: array
                    items:
                        $ref: '#/components/schemas/Label'
            required:
                - codeRepositoryId
                - uri
        Connection:
            type: object
            description: 'Represents a connection to a third-party platform, usually either HPC or cloud platform credentials'
            properties:
                connectionId:
                    type: integer
                connectionName:
                    type: string
                connectionProvider:
                    type: string
                loginName:
                    type: string
                password:
                    type: string
                token:
                    type: string
                authMethod:
                    type: string
            required:
                - connectionId
                - connectionName
                - connectionProvider
        DataRepository:
            type: object
            description: Represents a data repository
            properties:
                dataRepositoryId:
                    type: string
                uri:
                    type: string
                description:
                    type: string
                labels:
                    type: array
                    items:
                        $ref: '#/components/schemas/Label'
            required:
                - dataRepositoryId
                - uri
        ErrorMessage:
            type: string
            maxLength: 1024
            description: An error message
        ExperimentRepository:
            type: object
            description: 'Represents an mlflow experiment, see also [mlflow API specification](https://www.mlflow.org/docs/latest/rest-api.html#mlflowexperiment)'
            properties:
                experimentId:
                    type: string
                name:
                    type: string
                artifact_location:
                    type: string
                lifecycle_stage:
                    type: string
                last_update_time:
                    type: integer
                creation_time:
                    type: integer
                labels:
                    type: array
                    items:
                        $ref: '#/components/schemas/Label'
            required:
                - experimentId
        Label:
            type: object
            description: Represents a label or a Tag depending on the presence of the value parameter
            properties:
                scope:
                    type: string
                name:
                    type: string
                value:
                    type: string
            required:
                - scope
                - name
        ModelRepository:
            type: object
            description: Represents a model
            properties:
                modelRepositoryId:
                    type: string
                uri:
                    type: string
                description:
                    type: string
                git:
                    $ref: '#/components/schemas/CodeRepository'
                commit:
                    type: string
                labels:
                    type: array
                    items:
                        $ref: '#/components/schemas/Label'
            required:
                - modelRepositoryId
                - uri
        Organization:
            type: object
            description: 'Represents an organization, i.e. a collection of user groups and users'
            properties:
                organizationId:
                    type: string
                name:
                    type: string
                contact:
                    $ref: '#/components/schemas/User'
                groups:
                    type: array
                    items:
                        $ref: '#/components/schemas/UserGroup'
                members:
                    type: array
                    items:
                        $ref: '#/components/schemas/User'
            required:
                - organizationId
                - name
                - contact
        PaginationResponse:
            type: object
            properties:
                totalrecords:
                    type: integer
            required:
                - totalrecords
        PaymentInfo:
            type: object
            description: Represents payment information
            properties:
                paymentInfoId:
                    type: string
                address:
                    type: string
                paymentMethod:
                    type: string
                paymentDetails:
                    type: string
            required:
                - paymentInfoId
                - address
                - paymentMethod
                - paymentDetails
        Project:
            type: object
            description: 'A project is a collection of code, experiments, data and models with permission management (owner, members, groups)'
            properties:
                projectId:
                    type: integer
                name:
                    type: string
                description:
                    $ref: '#/components/schemas/Description'
                owner:
                    $ref: '#/components/schemas/User'
                members:
                    type: array
                    items:
                        $ref: '#/components/schemas/User'
                groups:
                    type: array
                    items:
                        $ref: '#/components/schemas/UserGroup'
                codeRepositories:
                    type: array
                    items:
                        $ref: '#/components/schemas/CodeRepository'
                experimentRepositories:
                    type: array
                    items:
                        $ref: '#/components/schemas/ExperimentRepository'
                dataRepositories:
                    type: array
                    items:
                        $ref: '#/components/schemas/DataRepository'
                labels:
                    type: array
                    items:
                        $ref: '#/components/schemas/Label'
            required:
                - projectId
                - owner
        Description:
            type: object
            description: Represents the description of a project
            properties:
                short:
                    type: string
                long:
                    type: string
        Run:
            type: object
            description: 'Represents a quadruple of experiment, code, data and hardware-configuration'
            properties:
                experimentRepository:
                    $ref: '#/components/schemas/ExperimentRepository'
                modelRepository:
                    $ref: '#/components/schemas/ModelRepository'
                dataRepository:
                    $ref: '#/components/schemas/DataRepository'
                connections:
                    $ref: '#/components/schemas/Connection'
                timestamp:
                    type: string
        RunsByCodeRepository:
            type: object
            description: Runs grouped by codeRepository used
            properties:
                codeRepository:
                    $ref: '#/components/schemas/CodeRepository'
                usage:
                    type: array
                    items:
                        type: object
                        properties:
                            experimentRepository:
                                $ref: '#/components/schemas/ExperimentRepository'
                            modelRepository:
                                $ref: '#/components/schemas/ModelRepository'
                            dataRepository:
                                $ref: '#/components/schemas/DataRepository'
                            connection:
                                $ref: '#/components/schemas/Connection'
        RunsByDataRepository:
            type: object
            description: Runs grouped by the data used
            properties:
                dataRepository:
                    $ref: '#/components/schemas/DataRepository'
                usage:
                    type: array
                    items:
                        type: object
                        properties:
                            experimentRepository:
                                $ref: '#/components/schemas/ExperimentRepository'
                            modelRepository:
                                $ref: '#/components/schemas/ModelRepository'
                            connection:
                                $ref: '#/components/schemas/Connection'
        RunsByExperiment:
            type: object
            description: Runs grouped by expiment used
            properties:
                experimentRepository:
                    $ref: '#/components/schemas/ExperimentRepository'
                usage:
                    type: array
                    items:
                        type: object
                        properties:
                            modelRepository:
                                $ref: '#/components/schemas/ModelRepository'
                            dataRepository:
                                $ref: '#/components/schemas/DataRepository'
                            connection:
                                $ref: '#/components/schemas/Connection'
        RunsByModel:
            type: object
            description: Runs grouped by model used
            properties:
                modelRepository:
                    $ref: '#/components/schemas/ModelRepository'
                usage:
                    type: array
                    items:
                        type: object
                        properties:
                            experimentRepository:
                                $ref: '#/components/schemas/ExperimentRepository'
                            dataRepository:
                                $ref: '#/components/schemas/DataRepository'
                            connection:
                                $ref: '#/components/schemas/Connection'
        Settings:
            type: object
            description: User settings
            properties:
                user:
                    $ref: '#/components/schemas/User'
                password:
                    type: string
                token:
                    type: string
                paymentInfo:
                    $ref: '#/components/schemas/PaymentInfo'
                connections:
                    type: array
                    items:
                        $ref: '#/components/schemas/Connection'
            required:
                - user
                - password
        User:
            type: object
            description: Represents a user
            properties:
                userId:
                    type: integer
                name:
                    type: string
                email:
                    type: string
            required:
                - userId
                - name
                - email
        UserGroup:
            type: object
            description: Represents a user group
            properties:
                userGroupId:
                    type: string
                name:
                    type: string
                admin:
                    $ref: '#/components/schemas/User'
                members:
                    type: array
                    items:
                        $ref: '#/components/schemas/User'
            required:
                - userGroupId
                - name
                - admin
    parameters:
        PageLength:
            name: pagelength
            in: query
            description: Number of records to return
            schema:
                minimum: 1
                maximum: 200
                default: 50
                type: integer
        StartIndex:
            name: startindex
            in: query
            description: Start index for paging
            schema:
                minimum: 0
                type: integer
paths:
    /users:
        get:
            parameters:
                - $ref: '#/components/parameters/StartIndex'
                - $ref: '#/components/parameters/PageLength'
            summary: List of all users
            description: List of all users (admin only)
            responses:
                '200':
                    description: OK
                    content:
                        application/json:
                            schema:
                                type: object
                                allOf:
                                    - $ref: '#/components/schemas/PaginationResponse'
                                    - properties:
                                          users:
                                              type: array
                                              items:
                                                  $ref: '#/components/schemas/User'
                            examples:
                                exampleUsers:
                                    value:
                                        totalrecords: 1
                                        users:
                                            - $ref: '#/paths/~1users~1%7BuserId%7D/get/responses/200/content/application~1json/examples/exampleUser/value'
        put:
            summary: Creates a new user
            requestBody:
                description: Creates a new user
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                userName:
                                    type: string
                                email:
                                    type: string
                        example:
                            userName: black_panther
                            email: panther@road_to_nowhere.wakanda
            responses:
                '201':
                    description: Successfully created user
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    userId:
                                        type: integer
    '/users/{userId}':
        parameters:
            - name: userId
              in: path
              required: true
              schema:
                  type: integer
        get:
            summary: Returns the information on a specific user
            responses:
                '200':
                    description: A json array with user information
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/User'
                            examples:
                                exampleUser:
                                    value:
                                        userId: 1
                                        name: Fabian Emmerich
                                        email: fabian.emmerich@4-cast.de
        post:
            summary: Update user info
            requestBody:
                description: Updated user info
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/User'
            responses:
                '200':
                    description: Successfully updated user
    '/users/{userId}/settings':
        parameters:
            - name: userId
              in: path
              required: true
              schema:
                  type: integer
        get:
            summary: Returns the settings for a specific user
            responses:
                '200':
                    description: OK
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    settings:
                                        $ref: '#/components/schemas/Settings'
        post:
            summary: Updates user settings
            requestBody:
                description: Updated user settings
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Settings'
            responses:
                '200':
                    description: Successfully updated settings
    /projects:
        get:
            parameters:
                - $ref: '#/components/parameters/StartIndex'
                - $ref: '#/components/parameters/PageLength'
            summary: Returns all projects (admin only)
            responses:
                '200':
                    description: OK
                    content:
                        application/json:
                            schema:
                                type: object
                                allOf:
                                    - $ref: '#/components/schemas/PaginationResponse'
                                    - properties:
                                          projects:
                                              type: array
                                              items:
                                                  $ref: '#/components/schemas/Project'
                            examples:
                                exampleProjects:
                                    value:
                                        totalrecords: 1
                                        projects:
                                            - $ref: '#/paths/~1projects~1%7BprojectId%7D/get/responses/200/content/application~1json/examples/exampleProject/value'
        put:
            summary: Creates a new project
            requestBody:
                description: Project information
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Project'
            responses:
                '201':
                    description: Created new project
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    projectId:
                                        type: integer
    '/projects/user/{userId}':
        parameters:
            - name: userId
              in: path
              required: true
              schema:
                  type: integer
        get:
            parameters:
                - $ref: '#/components/parameters/StartIndex'
                - $ref: '#/components/parameters/PageLength'
            summary: Returns all projects for user with userId
            responses:
                '200':
                    description: OK
                    content:
                        application/json:
                            schema:
                                type: object
                                allOf:
                                    - $ref: '#/components/schemas/PaginationResponse'
                                    - properties:
                                          projects:
                                              type: array
                                              items:
                                                  $ref: '#/components/schemas/Project'
                            examples:
                                exampleUserProjects:
                                    value:
                                        $ref: '#/paths/~1projects/get/responses/200/content/application~1json/examples/exampleProjects/value'
    '/projects/{projectId}':
        parameters:
            - name: projectId
              in: path
              required: true
              schema:
                  type: integer
        get:
            summary: Returns the information on a specific project
            responses:
                '200':
                    description: Information on a specific project
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Project'
                            examples:
                                exampleProject:
                                    value:
                                        projectId: 1
                                        name: Maelstrom Application 6 - Large-Scale Weather Regime Classification
                                        description:
                                            short: Classification of large-scale weather regimes for power predicition of renewable energy resources
                                            long: '# PCA and Clustering of Weather Data Features\n\nThe goal is to classify large-scale weather regimes (LSWRs) by performing a PCA on timeseries data containing multiple phyiscal quantities on a large grid covering the whole of Europe.\nClassification is done by applying a clustering algorithm on the data that assigns each individual time step to a cluster, where outliers are allowed.\n\nTo allow classification of timeseries grid data, we apply a dimensionality reduction algorithm (PCA) and transform the original data into PC space. The PC space is a multi-dimensional space that represents the phase space of the dynamical system described by the data. To avoid the curse of dimensions, we use only a reduced amount of PCs for the transformation such that the PCs reflect most of the variance of the data.\n\nFor clustering the states of the dynamical system in PC space, we use the [hierarchical density-based spatial clustering algorithm for applications with noise (HDBSCAN)](https://arxiv.org/abs/1911.02282), which is a modification of the [DBSCAN](https://dl.acm.org/doi/10.5555/3001460.3001507) algorithm.\n\n## PCA\n\nThe PCA is performed on the whole dataset, whereas only 3 PCs are kept for the transformation. This is because we only have `10^3` data samples. Choosing more PCs would require more data (curse of dimensions). I.e., using `N` PCs would require at least `10^N` samples.\n\n## Clustering\n\nBefore applying the clustering, the data are transformed into the 3-D sub-space of the PC-space. The result reflects the phase space containing all states of the dynamical system throughout the given time span.\n\nWithin this space, we perform a clustering to find reoccuring states of the system. Each cluster represents a LSWR, i.e. all clusters represent the ensemble of LSWRs that our system resided in during the given time range. Each data point in a cluster hence reflects the time steps within the timeseries where the LSWR of the respective cluster appeared.\n\n## Statistical Analysis of the Clusters\n\nThe clusters (LSWRs) are then statistically analyzed such that we retrieve information about the LSWRs in general (total abundance, mean and standard deviation of their duration). In addition, we visualize the appearance of individual LSWR clusters at all time steps.\n'
                                        owner:
                                            $ref: '#/paths/~1users~1%7BuserId%7D/get/responses/200/content/application~1json/examples/exampleUser/value'
                                        members:
                                            - $ref: '#/paths/~1users~1%7BuserId%7D/get/responses/200/content/application~1json/examples/exampleUser/value'
                                        groups:
                                            - $ref: '#/paths/~1groups~1%7BgroupId%7D/get/responses/200/content/application~1json/examples/exampleUserGroup/value'
                                        codeRepositories:
                                            - $ref: '#/paths/~1projects~1%7BprojectId%7D~1code/get/responses/200/content/application~1json/examples/exampleProject/value'
                                        experimentRepositories:
                                            - $ref: '#/paths/~1projects~1%7BprojectId%7D~1experiments/get/responses/200/content/application~1json/examples/exampleExperimentRepositories/value'
                                        dataRepositories:
                                            - $ref: '#/paths/~1projects~1%7BprojectId%7D~1data/get/responses/200/content/application~1json/examples/exampleDataRepositories/value'
                                        labels:
                                            - scope: problem-type
                                              name: Classification
                                            - scope: problem-type
                                              name: Dimensionality Reduction
                                            - scope: problem-type
                                              name: Clustering
        post:
            summary: Update project
            requestBody:
                description: Updated project information
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Project'
            responses:
                '200':
                    description: Successfully updated project information
    '/projects/{projectId}/code':
        parameters:
            - name: projectId
              in: path
              required: true
              schema:
                  type: integer
        get:
            parameters:
                - $ref: '#/components/parameters/StartIndex'
                - $ref: '#/components/parameters/PageLength'
            summary: Returns code entries for given project
            responses:
                '200':
                    description: Code entries for given project
                    content:
                        application/json:
                            schema:
                                type: object
                                allOf:
                                    - $ref: '#/components/schemas/PaginationResponse'
                                    - properties:
                                          codeRepositories:
                                              type: array
                                              items:
                                                  $ref: '#/components/schemas/CodeRepository'
                            examples:
                                exampleProject:
                                    value:
                                        totalrecords: 1
                                        codeRepositories:
                                            - $ref: '#/paths/~1projects~1%7BprojectId%7D~1code~1%7BcodeRepositoryId%7D/get/responses/200/content/application~1json/examples/exampleCodeRepository/value'
        put:
            summary: Add code repository
            requestBody:
                description: Added code repository information
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/CodeRepository'
            responses:
                '201':
                    description: Successfully added code repository
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    codeRepositoryId:
                                        type: string
    '/projects/{projectId}/code/usage':
        parameters:
            - name: projectId
              in: path
              required: true
              schema:
                  type: integer
        get:
            parameters:
                - $ref: '#/components/parameters/StartIndex'
                - $ref: '#/components/parameters/PageLength'
            summary: Returns all codeRepos for given project and runs that the codeRepos were used in
            responses:
                '200':
                    description: CodeRepos for given project with their respective runs
                    content:
                        application/json:
                            schema:
                                type: object
                                allOf:
                                    - $ref: '#/components/schemas/PaginationResponse'
                                    - properties:
                                          codeRepositoriesWithUsage:
                                              type: array
                                              items:
                                                  $ref: '#/components/schemas/RunsByCodeRepository'
    '/projects/{projectId}/code/{codeRepositoryId}':
        parameters:
            - name: projectId
              in: path
              required: true
              schema:
                  type: integer
            - name: codeRepositoryId
              in: path
              required: true
              schema:
                  type: integer
        get:
            summary: Returns code entry for given project
            responses:
                '200':
                    description: Code entry for given project
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/CodeRepository'
                            examples:
                                exampleCodeRepository:
                                    value:
                                        codeRepositoryId: mantik-tutorials-github-repo
                                        uri: 'https://github.com/mantik-ai/tutorials'
                                        description: GitHub repo containing examples on how to use mantik
                                        labels:
                                            - scope: github-repo
                                              name: Tutorials
        post:
            summary: Updates code repository
            requestBody:
                description: Updated code repository information
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/CodeRepository'
            responses:
                '200':
                    description: Successfully updated code repository
    '/projects/{projectId}/data':
        parameters:
            - name: projectId
              in: path
              required: true
              schema:
                  type: integer
        get:
            parameters:
                - $ref: '#/components/parameters/StartIndex'
                - $ref: '#/components/parameters/PageLength'
            summary: Returns data entries for given project
            responses:
                '200':
                    description: Data entries for given project
                    content:
                        application/json:
                            schema:
                                type: object
                                allOf:
                                    - $ref: '#/components/schemas/PaginationResponse'
                                    - properties:
                                          dataRepositories:
                                              type: array
                                              items:
                                                  $ref: '#/components/schemas/DataRepository'
                            examples:
                                exampleDataRepositories:
                                    value:
                                        totalrecords: 1
                                        dataRepositories:
                                            - $ref: '#/paths/~1projects~1%7BprojectId%7D~1data~1%7BdataRepositoryId%7D/get/responses/200/content/application~1json/examples/exampleDataRepository/value'
        put:
            summary: Add data repository
            requestBody:
                description: Added data repository information
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/DataRepository'
            responses:
                '201':
                    description: Successfully added data repository
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    dataRepositoryId:
                                        type: string
    '/projects/{projectId}/data/usage':
        parameters:
            - name: projectId
              in: path
              required: true
              schema:
                  type: integer
        get:
            parameters:
                - $ref: '#/components/parameters/StartIndex'
                - $ref: '#/components/parameters/PageLength'
            summary: Returns data entries for given project and runs grouped by the data
            responses:
                '200':
                    description: Data entries for given project with their respective runs
                    content:
                        application/json:
                            schema:
                                type: object
                                allOf:
                                    - $ref: '#/components/schemas/PaginationResponse'
                                    - properties:
                                          dataRepositoriesWithUsage:
                                              type: array
                                              items:
                                                  $ref: '#/components/schemas/RunsByDataRepository'
    '/projects/{projectId}/data/{dataRepositoryId}':
        parameters:
            - name: projectId
              in: path
              required: true
              schema:
                  type: integer
            - name: dataRepositoryId
              in: path
              required: true
              schema:
                  type: integer
        get:
            summary: Returns data entry for given project
            responses:
                '200':
                    description: Data entry for given project
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/DataRepository'
                            examples:
                                exampleDataRepository:
                                    value:
                                        dataRepositoryId: constants-ab
                                        uri: 'https://storage.ecmwf.europeanweather.cloud/MAELSTROM_AP6/ECMWF_AB137.nc'
                                        description: 'The underlying data are from the ECMWF IFS HRES model. A detailed description can be found [here (pp. 21)](https://www.maelstrom-eurohpc.eu/content/docs/uploads/doc6.pdf). The data cover a time range of 2017-2020 with an hourly temporal resolution. Hence, the data contain `~10^3` samples.'
                                        labels:
                                            - scope: weather-model
                                              name: ECMWF IFS HRES
        post:
            summary: Update data repository
            requestBody:
                description: Updated data repository information
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/DataRepository'
            responses:
                '200':
                    description: Successfully updated code repository
    '/projects/{projectId}/experiments':
        parameters:
            - name: projectId
              in: path
              required: true
              schema:
                  type: integer
        get:
            parameters:
                - $ref: '#/components/parameters/StartIndex'
                - $ref: '#/components/parameters/PageLength'
            summary: Returns experiment entries for given project
            responses:
                '200':
                    description: Experiment entries for given project
                    content:
                        application/json:
                            schema:
                                type: object
                                allOf:
                                    - $ref: '#/components/schemas/PaginationResponse'
                                    - properties:
                                          experimentRepositories:
                                              type: array
                                              items:
                                                  $ref: '#/components/schemas/ExperimentRepository'
                            examples:
                                exampleExperimentRepositories:
                                    value:
                                        totalrecords: 1
                                        codeRepositories:
                                            - $ref: '#/paths/~1projects~1%7BprojectId%7D~1experiments~1%7BexperimentRepositoryId%7D/get/responses/200/content/application~1json/examples/exampleExperimentRepository/value'
        put:
            summary: Add experiment repository
            requestBody:
                description: Added data repository information
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/ExperimentRepository'
            responses:
                '201':
                    description: Successfully added experiment repository
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    experimentRepositoryId:
                                        type: string
    '/projects/{projectId}/experiments/usage':
        parameters:
            - name: projectId
              in: path
              required: true
              schema:
                  type: integer
        get:
            parameters:
                - $ref: '#/components/parameters/StartIndex'
                - $ref: '#/components/parameters/PageLength'
            summary: Returns all experiments for given project and runs that the experiments were used in
            responses:
                '200':
                    description: Experiments for given project with their respective runs
                    content:
                        application/json:
                            schema:
                                type: object
                                allOf:
                                    - $ref: '#/components/schemas/PaginationResponse'
                                    - properties:
                                          experimentsWithUsage:
                                              type: array
                                              items:
                                                  $ref: '#/components/schemas/RunsByExperiment'
    '/projects/{projectId}/experiments/{experimentRepositoryId}':
        parameters:
            - name: projectId
              in: path
              required: true
              schema:
                  type: integer
            - name: experimentRepositoryId
              in: path
              required: true
              schema:
                  type: integer
        get:
            summary: Returns experiment entry for given project
            responses:
                '200':
                    description: Experiment entry for given project
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ExperimentRepository'
                            examples:
                                exampleExperimentRepository:
                                    value:
                                        experimentId: example-experiment
                                        name: example-experiment
                                        artifact_location: /artifacts/experiments/example-experiment
                                        lifecycle_stage: idontknow
                                        last_update_time: 1660744660
                                        creation_time: 1660744660
                                        labels:
                                            - scope: problem-type
                                              name: Classification
        post:
            summary: Update experiment repository
            requestBody:
                description: Updated data repository information
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/ExperimentRepository'
            responses:
                '200':
                    description: Successfully updated experiment repository
    '/projects/{projectId}/models':
        parameters:
            - name: projectId
              in: path
              required: true
              schema:
                  type: integer
        get:
            parameters:
                - $ref: '#/components/parameters/StartIndex'
                - $ref: '#/components/parameters/PageLength'
            summary: Returns model entries for given project
            responses:
                '200':
                    description: Model entries for given project
                    content:
                        application/json:
                            schema:
                                type: object
                                allOf:
                                    - $ref: '#/components/schemas/PaginationResponse'
                                    - properties:
                                          modelRepositories:
                                              type: array
                                              items:
                                                  $ref: '#/components/schemas/ModelRepository'
                            examples:
                                exampleModelRepositories:
                                    value:
                                        totalrecords: 1
                                        modelRepositories:
                                            - $ref: '#/paths/~1projects~1%7BprojectId%7D~1models~1%7BmodelRepositoryId%7D/get/responses/200/content/application~1json/examples/exampleModelRepository/value'
        put:
            summary: Add model repository
            requestBody:
                description: Added model repository information
                required: true
                content:
                    application/json:
                        schema:
                            type: array
                            items:
                                $ref: '#/components/schemas/ModelRepository'
            responses:
                '201':
                    description: Successfully added model repository
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    modelRepositoryId:
                                        type: string
    '/projects/{projectId}/models/usage':
        parameters:
            - name: projectId
              in: path
              required: true
              schema:
                  type: integer
        get:
            parameters:
                - $ref: '#/components/parameters/StartIndex'
                - $ref: '#/components/parameters/PageLength'
            summary: Returns all models for given project and runs that the models were created in
            responses:
                '200':
                    description: models for given project with their respective runs
                    content:
                        application/json:
                            schema:
                                type: object
                                allOf:
                                    - $ref: '#/components/schemas/PaginationResponse'
                                    - properties:
                                          modelsWithUsage:
                                              type: array
                                              items:
                                                  $ref: '#/components/schemas/RunsByModel'
    '/projects/{projectId}/models/{modelRepositoryId}':
        parameters:
            - name: projectId
              in: path
              required: true
              schema:
                  type: integer
            - name: modelRepositoryId
              in: path
              required: true
              schema:
                  type: integer
        get:
            summary: Returns model entry for given ID
            responses:
                '200':
                    description: Model entry for given ID
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ModelRepository'
                            examples:
                                exampleModelRepository:
                                    value:
                                        modelRepositoryId: example-model
                                        uri: /artifacts/models/example-model
                                        git:
                                            $ref: '#/paths/~1projects~1%7BprojectId%7D~1code~1%7BcodeRepositoryId%7D/get/responses/200/content/application~1json/examples/exampleCodeRepository/value'
                                        commit: 726150341180ba37e56859c377d56aa7dd87985b
                                        labels:
                                            - scope: model-type
                                              name: Convolutional Neural Network
        post:
            summary: Update model repository
            requestBody:
                description: Updated model repository information
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/ModelRepository'
            responses:
                '200':
                    description: Successfully updated model repository
    '/projects/{projectId}/runs':
        parameters:
            - name: projectId
              in: path
              required: true
              schema:
                  type: integer
        get:
            parameters:
                - $ref: '#/components/parameters/StartIndex'
                - $ref: '#/components/parameters/PageLength'
            summary: Returns all runs for a given project
            responses:
                '200':
                    description: OK
                    content:
                        application/json:
                            schema:
                                type: object
                                allOf:
                                    - $ref: '#/components/schemas/PaginationResponse'
                                    - properties:
                                          runs:
                                              type: array
                                              items:
                                                  $ref: '#/components/schemas/Run'
        put:
            requestBody:
                description: Run information
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/AddRun'
            summary: Creates a new run
            responses:
                '201':
                    description: Created new run
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    timestamp:
                                        type: string
    '/projects/user/{userId}/search':
        parameters:
            - name: userId
              in: path
              required: true
              schema:
                  type: integer
            - name: searchString
              in: query
              schema:
                  type: string
            - name: labels
              in: query
              schema:
                  type: array
                  items:
                      $ref: '#/components/schemas/Label'
            - name: ownerId
              in: query
              description: The User that owns the project
              schema:
                  type: integer
            - name: memberId
              in: query
              description: Filter search by Members of the project
              schema:
                  type: integer
            - name: groupId
              in: query
              description: Filter search by User Group
              schema:
                  type: integer
            - name: organizationId
              in: query
              description: Filter search by Organization membership of the Owner
              schema:
                  type: integer
        get:
            parameters:
                - $ref: '#/components/parameters/StartIndex'
                - $ref: '#/components/parameters/PageLength'
            summary: Return a curation of projects tailored for a specific user with a set of search parameters
            responses:
                '200':
                    description: Successully returned projects that match the search
                    content:
                        application/json:
                            schema:
                                type: object
                                allOf:
                                    - $ref: '#/components/schemas/PaginationResponse'
                                    - properties:
                                          projects:
                                              type: array
                                              items:
                                                  $ref: '#/components/schemas/Project'
    /groups:
        get:
            parameters:
                - $ref: '#/components/parameters/StartIndex'
                - $ref: '#/components/parameters/PageLength'
            summary: Get all User group (admin only)
            responses:
                '200':
                    description: Get all user groups
                    content:
                        application/json:
                            schema:
                                type: object
                                allOf:
                                    - $ref: '#/components/schemas/PaginationResponse'
                                    - properties:
                                          userGroups:
                                              type: array
                                              items:
                                                  $ref: '#/components/schemas/UserGroup'
                            examples:
                                exampleUserGroups:
                                    value:
                                        totalrecords: 1
                                        userGroups:
                                            - $ref: '#/paths/~1groups~1%7BgroupId%7D/get/responses/200/content/application~1json/examples/exampleUserGroup/value'
        put:
            summary: Create a new user group
            requestBody:
                description: User group information
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/UserGroup'
            responses:
                '201':
                    description: Created
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    groupId:
                                        type: string
    '/groups/{groupId}':
        parameters:
            - name: groupId
              in: path
              required: true
              schema:
                  type: integer
        get:
            summary: Get Group information
            responses:
                '200':
                    description: Get group information
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UserGroup'
                            examples:
                                exampleUserGroup:
                                    value:
                                        userGroupId: example-user-group
                                        name: Ambrosys Team Green
                                        admin:
                                            $ref: '#/paths/~1users~1%7BuserId%7D/get/responses/200/content/application~1json/examples/exampleUser/value'
                                        members:
                                            - $ref: '#/paths/~1users~1%7BuserId%7D/get/responses/200/content/application~1json/examples/exampleUser/value'
        post:
            summary: Update group
            requestBody:
                description: Updated user group information
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/UserGroup'
            responses:
                '200':
                    description: Successfully updated user group
    /organizations:
        get:
            parameters:
                - $ref: '#/components/parameters/StartIndex'
                - $ref: '#/components/parameters/PageLength'
            summary: Get list of organizations (admin only)
            responses:
                '200':
                    description: List of organizations
                    content:
                        application/json:
                            schema:
                                type: object
                                allOf:
                                    - $ref: '#/components/schemas/PaginationResponse'
                                    - properties:
                                          projects:
                                              type: array
                                              items:
                                                  $ref: '#/components/schemas/Organization'
        put:
            summary: Add organization
            requestBody:
                description: Organization info
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Organization'
            responses:
                '201':
                    description: Sucessfully added organization
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    organizationId:
                                        type: integer
    '/organizations/{organizationId}':
        parameters:
            - name: organizationId
              in: path
              required: true
              schema:
                  type: integer
        get:
            summary: Get info on specified organization
            responses:
                '200':
                    description: Successully retrieved organization info
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Organization'
        post:
            summary: Update organization info
            requestBody:
                description: Updated organization info
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Organization'
            responses:
                '200':
                    description: Successfully updated organization info
    /labels:
        get:
            parameters:
                - $ref: '#/components/parameters/StartIndex'
                - $ref: '#/components/parameters/PageLength'
            summary: Get all labels (admin only)
            responses:
                '200':
                    description: List of labels
                    content:
                        application/json:
                            schema:
                                type: object
                                allOf:
                                    - $ref: '#/components/schemas/PaginationResponse'
                                    - properties:
                                          projects:
                                              type: array
                                              items:
                                                  $ref: '#/components/schemas/Label'
        put:
            summary: add label
            requestBody:
                description: label info
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Label'
            responses:
                '201':
                    description: Sucessfully added label
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Label'
    '/labels/{userId}/search':
        parameters:
            - name: userId
              in: path
              required: true
              schema:
                  type: integer
            - name: scope
              in: query
              required: true
              schema:
                  type: string
            - name: searchString
              in: query
              schema:
                  type: string
        get:
            parameters:
                - $ref: '#/components/parameters/StartIndex'
                - $ref: '#/components/parameters/PageLength'
            summary: Return a collection of labels appropriate for the user's search
            responses:
                '200':
                    description: Successully returned labels that match the search
                    content:
                        application/json:
                            schema:
                                type: object
                                allOf:
                                    - $ref: '#/components/schemas/PaginationResponse'
                                    - properties:
                                          projects:
                                              type: array
                                              items:
                                                  $ref: '#/components/schemas/Label'
    '/labels/{userId}/{scope}':
        parameters:
            - name: userId
              in: path
              required: true
              schema:
                  type: integer
            - name: scope
              in: path
              required: true
              schema:
                  type: string
        get:
            parameters:
                - $ref: '#/components/parameters/StartIndex'
                - $ref: '#/components/parameters/PageLength'
            summary: Return all labels of the given scope
            responses:
                '200':
                    description: Successully returned labels that match the scope
                    content:
                        application/json:
                            schema:
                                type: object
                                allOf:
                                    - $ref: '#/components/schemas/PaginationResponse'
                                    - properties:
                                          projects:
                                              type: array
                                              items:
                                                  $ref: '#/components/schemas/Label'
